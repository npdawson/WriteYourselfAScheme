
==================== FINAL INTERFACE ====================
2016-10-07 08:14:20.948714804 UTC

interface WriteYourselfAScheme-0.1.0.0-9XCnyXZ9nZK8zfaQQc7IOM:Lib 8001
  interface hash: 44be0a20f2bae43521a11eff2b7cfb08
  ABI hash: 7faad04afa208b7ce399053dc5fa5e93
  export-list hash: 686ff192c08afcf4e29a1068300be9a9
  orphan hash: e27ab55d3b28504c1ed818502785dc4b
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.apply
  Lib.escapedChars
  Lib.eval
  Lib.extractValue
  Lib.parseAtom
  Lib.parseDec
  Lib.parseDottedList
  Lib.parseExpr
  Lib.parseHex
  Lib.parseList
  Lib.parseNum
  Lib.parseNumber
  Lib.parseOct
  Lib.parseQuoted
  Lib.parseRadix
  Lib.parseString
  Lib.readExpr
  Lib.readWith
  Lib.spaces
  Lib.symbol
  Lib.trapError
module dependencies: Prims Types
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      parsec-3.1.11@parsec-3.1.11-IYEP8Lv1S9x5FeUQxGPDBY
                      text-1.2.2.1@text-1.2.2.1-FgcR4Xf0VlEHD9HLxzq9WJ
                      transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         text-1.2.2.1@text-1.2.2.1-FgcR4Xf0VlEHD9HLxzq9WJ:Data.Text
         text-1.2.2.1@text-1.2.2.1-FgcR4Xf0VlEHD9HLxzq9WJ:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-FgcR4Xf0VlEHD9HLxzq9WJ:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-FgcR4Xf0VlEHD9HLxzq9WJ:Data.Text
                         text-1.2.2.1@text-1.2.2.1-FgcR4Xf0VlEHD9HLxzq9WJ:Data.Text.Lazy
import  -/  Prims 2501dff3294872c349493d227e42a111
  exports: c941dd0915bf8763c9e99689f40fd6a0
  primitives ee74dd30ee5affa970dd02b48b664796
import  -/  Types d92fdf7f46d3fbbc1da4bae29b0cf88a
  exports: 23123cfd6e8c1d4f3a359ea100b16a6e
  Atom 583eda294242993ab6a0a7d3e132409a
  BadSpecialForm c759e64143671dbfd3b144901b807c16
  Bool 9e3e1d74854a3698cab4e0d84163ed91
  DottedList 2fd300f0400392c68250094c09f547a2
  LispVal 7d6381db5dd1588eb623f9864236a373
  List 12eb699d730e06936320a5b87c8b2d9b
  NotFunction 66dbcc20a0464262cbae8711b28800d4
  Number f790ed413e986d997a0514b078c51b54
  Parser 3b0234d50cba0155fe3af1c7c1713cae
  String 68e2c03825e66bb5d503a4ce9f7cd810
  ThrowsError b8da91a86139021cb5612f2f791c1fda
  TypeMismatch fd59ee226e0ee8f81a89affbec5a1641
import  -/  base-4.9.0.0:Data.Either bd9f099b82d4ed2d98c56d7144ac6957
import  -/  base-4.9.0.0:Data.Functor 6fc476505db88d678632a4a838125f13
import  -/  base-4.9.0.0:Data.Maybe 5f2ba364cbe65c060bc5436bc0b9d049
import  -/  base-4.9.0.0:Data.Traversable 7ce5b7ee67475ac3d03ae825b86efd9f
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Numeric 08bd52d7260627400faafb09e6574b07
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:Text.Read 9c1be14f7e5eac8b18bcb566c5763677
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Error.Class f139fe3464686c34428880c6a5173636
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Except 99ba8f4995df0e7f2f512551a0ca666a
import  -/  parsec-3.1.11@parsec-3.1.11-IYEP8Lv1S9x5FeUQxGPDBY:Text.Parsec.Char 3d897a8605871dda66c60ecd52036ec2
import  -/  parsec-3.1.11@parsec-3.1.11-IYEP8Lv1S9x5FeUQxGPDBY:Text.Parsec.Combinator 29f8e8ca82d416e4eb4c9edc54b599ff
import  -/  parsec-3.1.11@parsec-3.1.11-IYEP8Lv1S9x5FeUQxGPDBY:Text.Parsec.Prim cf18888e485e1110f2b3b5c4cba768ff
import  -/  parsec-3.1.11@parsec-3.1.11-IYEP8Lv1S9x5FeUQxGPDBY:Text.Parsec.String 41f9990518f5c456d027d8146beeff6c
import  -/  parsec-3.1.11@parsec-3.1.11-IYEP8Lv1S9x5FeUQxGPDBY:Text.ParserCombinators.Parsec 908037834069713b67fc7cde9f3c27c2
import  -/  parsec-3.1.11@parsec-3.1.11-IYEP8Lv1S9x5FeUQxGPDBY:Text.ParserCombinators.Parsec.Prim 2f4a2e8839fdcae48c3d69eda4922491
6ef651f33b4e010c47fef182e55adb13
  $s$fStream[]mtok ::
    Text.Parsec.Prim.Stream [tok] Data.Functor.Identity.Identity tok
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ tok.
                  @ [tok]
                  @ Data.Functor.Identity.Identity
                  @ tok
                  (Lib.$s$fStream[]mtok_$s$fStream[]mtok_$cp1Stream @ tok)
                  (Lib.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons @ tok) -}
df69b0402bccbb99250216398f4de943
  $s$fStream[]mtok_$s$fStream[]mtok_$cp1Stream ::
    GHC.Base.Monad Data.Functor.Identity.Identity
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (\ @ tok -> Data.Functor.Identity.$fMonadIdentity) -}
570ea1b8cfeddea1052472696daa4440
  $s$fStream[]mtok_$s$fStream[]mtok_$cuncons ::
    [tok]
    -> Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok]))
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ tok (ds :: [tok]) ->
                 case ds of wild {
                   []
                   -> GHC.Base.$
                        @ 'GHC.Types.PtrRepLifted
                        @ (GHC.Base.Maybe (tok, [tok]))
                        @ (Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok])))
                        (Data.Functor.Identity.$fApplicativeIdentity_$cpure
                           @ (GHC.Base.Maybe (tok, [tok])))
                        (GHC.Base.Nothing @ (tok, [tok]))
                   : t ts
                   -> GHC.Base.$
                        @ 'GHC.Types.PtrRepLifted
                        @ (GHC.Base.Maybe (tok, [tok]))
                        @ (Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok])))
                        (Data.Functor.Identity.$fApplicativeIdentity_$cpure
                           @ (GHC.Base.Maybe (tok, [tok])))
                        (GHC.Base.Just @ (tok, [tok]) (t, ts)) }) -}
fd862b35f1568545e34987476b177f4d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule2 Lib.$trModule1) -}
ec6f4979b2128d7d2f19933566cbf8c9
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Lib"#) -}
87e64ba02860f7d0c61ba546ecc3d937
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "WriteYourselfAScheme-0.1.0.0-9XCnyXZ9nZK8zfaQQc7IOM"#) -}
c6c9b293d977977b94a9756b3c2f0cd0
  $wescapedChars ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 4, Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ b1
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w3 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1) ->
                 let {
                   eta1 :: GHC.Types.Char
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                     {- Arity: 3,
                        Strictness: <L,1*U(U)><L,U(U,U(U,U,U),U)><L,1*U(U(U,U,U),U)> -}
                   = \ (x :: GHC.Types.Char)
                       (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                       (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                     w1
                       (case x of wild { GHC.Types.C# ds ->
                        case ds of ds1 {
                          DEFAULT -> Lib.escapedChars15
                          '"'# -> wild
                          '\\'# -> wild
                          'n'# -> Lib.escapedChars14
                          'r'# -> Lib.escapedChars13
                          't'# -> Lib.escapedChars12 } })
                       s2
                       (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                        case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                        case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                        case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                        case Text.Parsec.Error.$wmergeError
                               ww4
                               ww5
                               ww6
                               ww2
                               ww11
                               ww12
                               ww13
                               (GHC.Types.[]
                                  @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                        Text.Parsec.Error.ParseError ww15 ww16 } } } } })
                 } in
                 Lib.escapedChars_m1
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Types.Char>_R)
                   @ b1
                   w
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    case s2 of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                    case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                    Text.Parsec.Char.$wsatisfy
                      @ GHC.Base.String
                      @ Data.Functor.Identity.Identity
                      @ ()
                      (Lib.$s$fStream[]mtok @ GHC.Types.Char)
                      Lib.escapedChars2
                      @ b1
                      ww1
                      ww5
                      ww6
                      ww7
                      ww3
                      eta1
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       w2 (Text.Parsec.Error.mergeError err err')) } })
                   w2
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    case s2 of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                    case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                    Text.Parsec.Char.$wsatisfy
                      @ GHC.Base.String
                      @ Data.Functor.Identity.Identity
                      @ ()
                      (Lib.$s$fStream[]mtok @ GHC.Types.Char)
                      Lib.escapedChars2
                      @ b1
                      ww1
                      ww5
                      ww6
                      ww7
                      ww3
                      eta1
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       w3 (Text.Parsec.Error.mergeError err err')) } })
                   w3) -}
30c169aac7e33784bceae959c700cded
  $wk ::
    [GHC.Types.Char]
    -> Text.Parsec.Pos.SourceName
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ()
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 9,
     Strictness: <L,U><L,U><S,U><S,U><S,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ b1
                   (ww :: [GHC.Types.Char])
                   (ww1 :: Text.Parsec.Pos.SourceName)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: ())
                   (w :: Types.LispVal
                         -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b1)
                   (w1 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w2 :: Types.LispVal
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w3 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1) ->
                 Lib.$wparseExpr
                   @ b1
                   ww
                   ww1
                   ww2
                   ww3
                   ww4
                   (\ (x :: Types.LispVal)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    w (Types.List
                         (GHC.Types.:
                            @ Types.LispVal
                            Lib.parseQuoted2
                            (GHC.Types.: @ Types.LispVal x (GHC.Types.[] @ Types.LispVal))))
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww5 { Text.Parsec.Error.ParseError ww6 ww7 ->
                       case ww6 of ww8 { Text.Parsec.Pos.SourcePos ww9 ww16 ww17 ->
                       case Text.Parsec.Error.$wmergeError
                              ww9
                              ww16
                              ww17
                              ww7
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww18 ->
                       Text.Parsec.Error.ParseError ww15 ww18 } } } } }))
                   w1
                   (\ (x :: Types.LispVal)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    w2
                      (Types.List
                         (GHC.Types.:
                            @ Types.LispVal
                            Lib.parseQuoted2
                            (GHC.Types.: @ Types.LispVal x (GHC.Types.[] @ Types.LispVal))))
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww5 { Text.Parsec.Error.ParseError ww6 ww7 ->
                       case ww6 of ww8 { Text.Parsec.Pos.SourcePos ww9 ww16 ww17 ->
                       case Text.Parsec.Error.$wmergeError
                              ww9
                              ww16
                              ww17
                              ww7
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww18 ->
                       Text.Parsec.Error.ParseError ww15 ww18 } } } } }))
                   w3) -}
bba69e0ca5b139060f2633fbdf45a9c5
  $wlvl ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 4,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ b
                   (w :: Text.Parsec.Prim.State GHC.Base.String ())
                   (w1 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 Lib.$wescapedChars
                   @ b
                   w
                   w1
                   w2
                   (\ (err :: Text.Parsec.Error.ParseError) ->
                    case w of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                    case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                    Text.Parsec.Char.$wnoneOf
                      @ GHC.Base.String
                      @ Data.Functor.Identity.Identity
                      @ ()
                      (Lib.$s$fStream[]mtok @ GHC.Types.Char)
                      Lib.parseString6
                      @ b
                      ww1
                      ww5
                      ww6
                      ww7
                      ww3
                      w1
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       w3 (Text.Parsec.Error.mergeError err err')) } })) -}
04e404448a8432a9a6edbbdaf0a51d62
  $wparseAtom ::
    [GHC.Types.Char]
    -> Text.Parsec.Pos.SourceName
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ()
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 8,
     Strictness: <L,U><L,U><S,U><S,U><S,U><L,C(C1(C1(U)))><L,U><L,C(U)>,
     Inline: [0] -}
d43f58a14911373ea7195f246e311fae
  $wparseExpr ::
    GHC.Base.String
    -> Text.Parsec.Pos.SourceName
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ()
    -> (Types.LispVal
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Types.LispVal
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 9,
     Strictness: <L,U><L,U><S,U><S,U><S,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Inline: [0] -}
797f43b39edbd27b8a54184b5bbdaa1a
  $wparseList ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 4,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))>,
     Inline: [0],
     Unfolding: (\ @ b1
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: Types.LispVal
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w3 :: Types.LispVal
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1) ->
                 Text.Parsec.Combinator.$wsepBy
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ Types.LispVal
                   @ ()
                   Lib.parseDottedList7
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <Types.LispVal>_R))
                   Lib.parseDottedList3
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <()>_R))
                   @ b1
                   w
                   (\ (x :: [Types.LispVal]) -> w1 (Types.List x))
                   w2
                   (\ (x :: [Types.LispVal]) -> w3 (Types.List x))) -}
4f470f1bfbcb34e3222c5c68c85388d7
  apply ::
    GHC.Base.String
    -> [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ (func :: GHC.Base.String)
                   (args :: [Types.LispVal]) ->
                 case GHC.List.lookup
                        @ GHC.Base.String
                        @ ([Types.LispVal] -> Types.ThrowsError Types.LispVal)
                        GHC.Classes.$fEq[]_$s$fEq[]1
                        func
                        Prims.primitives of wild {
                   GHC.Base.Nothing
                   -> Data.Either.Left
                        @ Types.LispError
                        @ Types.LispVal
                        (Types.NotFunction Lib.apply1 func)
                   GHC.Base.Just x -> x args }) -}
97f42486795597aeacd1a30cdd7e9a35
  apply1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Unrecognized primitive function args"#) -}
53f18d900286af932b2e068caead148d
  escapedChars :: Text.Parsec.String.Parser GHC.Types.Char
  {- Arity: 5, Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.escapedChars1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <GHC.Types.Char>_R)) -}
60912278773238547304d8f31bf4a84b
  escapedChars1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,A><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ b1
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w3 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1) ->
                 Lib.$wescapedChars @ b1 w w1 w2 w4) -}
26e5033d5b4c2b0a5e64f497b7088042
  escapedChars10 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '"'#) -}
6e51eb51682f10fb538dec99c52a478a
  escapedChars11 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '\\'#) -}
952ad84c4885b248549acac6e7f083e9
  escapedChars12 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '\t'#) -}
538baccf62c2b9141dffcd59dfad2e9e
  escapedChars13 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '\r'#) -}
d731ceb631b8d649b6a87f9d9a738592
  escapedChars14 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '\n'#) -}
2c64603cb4392f8ab8fa2f7cf510fdff
  escapedChars15 :: GHC.Types.Char
  {- Strictness: x -}
c4b611d100dde84f026cc5f795d5ddde
  escapedChars2 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (c :: GHC.Types.Char) ->
                 GHC.List.elem
                   @ GHC.Types.Char
                   GHC.Classes.$fEqChar
                   c
                   Lib.escapedChars_cs) -}
3e2729041944db6a336870dcd192f2d0
  escapedChars3 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Lib.escapedChars10
                   Lib.escapedChars4) -}
c7bfedf8f4e9df580eb5c03ce9251042
  escapedChars4 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Lib.escapedChars9
                   Lib.escapedChars5) -}
04357894d7a1768b8261c71640f9fd37
  escapedChars5 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Lib.escapedChars8
                   Lib.escapedChars6) -}
eed180ceb8fb629f6fbe79684fa550ef
  escapedChars6 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Lib.escapedChars7
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6c583b819001ea473299bb59bf391688
  escapedChars7 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 't'#) -}
065f327b9b606682fb006514cf1e68bb
  escapedChars8 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'r'#) -}
8d9570cb375586fc9f00c6542b409d4f
  escapedChars9 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'n'#) -}
1bc36b05fc710e6b80099fcb3b5f26bb
  escapedChars_cs :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Lib.escapedChars11
                   Lib.escapedChars3) -}
5d52863d48976e6fb9ff20b67d05f466
  escapedChars_m1 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity GHC.Types.Char
  {- Unfolding: (Text.Parsec.Char.char
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Lib.$s$fStream[]mtok @ GHC.Types.Char)
                   Lib.escapedChars11) -}
e1940c9945d2a7aff6d999a92bad64a2
  eval :: Types.LispVal -> Types.ThrowsError Types.LispVal
  {- Arity: 1, Strictness: <S,1*U> -}
5bc42fb2b0aa22a09998fe3ae9517506
  extractValue :: Types.ThrowsError a -> a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Data.Either.Either Types.LispError a) ->
                 case ds of wild {
                   Data.Either.Left ipv -> Lib.extractValue1 @ a
                   Data.Either.Right val -> val }) -}
b0de978647a5280226ed079309fb2519
  extractValue1 :: a
  {- Strictness: x -}
be6a12f6814f55253a7dfbc1e302949a
  parseAtom :: Text.Parsec.String.Parser Types.LispVal
  {- Arity: 5,
     Strictness: <S(LS(LSS)S),1*U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Lib.parseAtom1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Types.LispVal>_R)) -}
161aab39368c389f55636d35ed24aade
  parseAtom1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <S(LS(LSS)S),1*U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,A><L,C(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: Types.LispVal
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w3 :: Types.LispVal
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1) ->
                 case w of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                 Lib.$wparseAtom @ b1 ww1 ww5 ww6 ww7 ww3 w1 w2 w4 } }) -}
b91e5798edd64a1baf01ce7d1cd7dd46
  parseDec :: Text.Parsec.String.Parser Types.LispVal
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.parseDec1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Types.LispVal>_R)) -}
15058f2f7442cbd2416ba7561a085f6f
  parseDec1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (eta :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta1 :: Types.LispVal
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta3 :: Types.LispVal
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 let {
                   lvl13 :: GHC.Base.String
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1
                     {- Arity: 1 -}
                   = \ (x :: GHC.Base.String) ->
                     eta1 (Types.Number (Lib.parseDec_g x))
                 } in
                 Lib.parseDec_m1
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Types.Char>_R)
                   @ b1
                   eta
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Text.Parsec.Combinator.$wmany1
                      @ GHC.Base.String
                      @ Data.Functor.Identity.Identity
                      @ GHC.Types.Char
                      @ ()
                      @ GHC.Types.Char
                      Lib.parseDec2
                        `cast`
                      (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                <GHC.Base.String>_R
                                <()>_R
                                <Data.Functor.Identity.Identity>_R
                                <GHC.Types.Char>_R))
                      @ b1
                      s2
                      lvl13
                      eta2
                      (\ (x1 :: GHC.Base.String)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eta1
                         (Types.Number (Lib.parseDec_g x1))
                         s3
                         (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta2
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Text.Parsec.Combinator.$wmany1
                      @ GHC.Base.String
                      @ Data.Functor.Identity.Identity
                      @ GHC.Types.Char
                      @ ()
                      @ GHC.Types.Char
                      Lib.parseDec2
                        `cast`
                      (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                <GHC.Base.String>_R
                                <()>_R
                                <Data.Functor.Identity.Identity>_R
                                <GHC.Types.Char>_R))
                      @ b1
                      s2
                      lvl13
                      eta2
                      (\ (x1 :: GHC.Base.String)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eta3
                         (Types.Number (Lib.parseDec_g x1))
                         s3
                         (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
c5f592dec423cfc6c405974eede9b737
  parseDec2 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b
                   (eta :: Text.Parsec.Prim.State GHC.Base.String ())
                   (eta1 :: GHC.Types.Char
                            -> Text.Parsec.Prim.State GHC.Base.String ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta3 :: GHC.Types.Char
                            -> Text.Parsec.Prim.State GHC.Base.String ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Prim.<?>2
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   Lib.parseDec4
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   Lib.parseDec3
                   @ b
                   eta
                   eta1
                   eta2
                   eta3
                   eta4) -}
a2fa23fc0f17b59702bece0b075aa73b
  parseDec3 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Text.Parsec.Char.digit2
                   (GHC.Types.[] @ GHC.Base.String)) -}
92b9b1a0cf512a63663f4bd2342477ad
  parseDec4 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (\ @ b
                   (w2 :: Text.Parsec.Prim.State GHC.Base.String ())[OneShot]
                   (w3 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w5 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w6 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)[OneShot] ->
                 case w2 of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                 Text.Parsec.Char.$wsatisfy
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Lib.$s$fStream[]mtok @ GHC.Types.Char)
                   GHC.Unicode.isDigit
                   @ b
                   ww1
                   ww5
                   ww6
                   ww7
                   ww3
                   w3
                   w6 } }) -}
0cf24de2e3445fea51692430f0a245ed
  parseDec5 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'd'#) -}
cb1382624900b3d14a5631db6708b26f
  parseDec6 :: GHC.Integer.Type.Integer
  {- Strictness: x -}
b12a72ebcf0859a6ed7f52679ed0a5ff
  parseDec7 :: GHC.Integer.Type.Integer
  {- Strictness: x -}
94124581d4bf89b5bc9af5a90e0d69f4
  parseDec8 ::
    Text.ParserCombinators.ReadP.P GHC.Integer.Type.Integer
  {- Unfolding: ((GHC.Read.$fReadInteger3
                    GHC.Read.$fReadInteger_$sconvertInt
                    Text.ParserCombinators.ReadPrec.minPrec)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <GHC.Integer.Type.Integer>_R)
                   @ GHC.Integer.Type.Integer
                   (Text.Read.readEither5 @ GHC.Integer.Type.Integer)) -}
6fd090282d8645f6f964933791c2a174
  parseDec_g :: GHC.Base.String -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 case Text.Read.readEither6
                        @ GHC.Integer.Type.Integer
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Integer.Type.Integer
                           Lib.parseDec8
                           s) of wild {
                   [] -> Lib.parseDec7
                   : x ds
                   -> case ds of wild1 { [] -> x : ipv ipv1 -> Lib.parseDec6 } }) -}
6813a7cce17234507315d02c23d6420f
  parseDec_m1 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity GHC.Types.Char
  {- Unfolding: (Text.Parsec.Char.char
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Lib.$s$fStream[]mtok @ GHC.Types.Char)
                   Lib.parseDec5) -}
924ea8d113b2ea883b82d095020be40e
  parseDottedList :: Text.Parsec.String.Parser Types.LispVal
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Lib.parseDottedList1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Types.LispVal>_R)) -}
e38a3b4f6de61255c4deb223f1f8efbd
  parseDottedList1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: Types.LispVal
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: Types.LispVal
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Text.Parsec.Combinator.$wendBy
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ Types.LispVal
                   @ ()
                   Lib.parseDottedList7
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <Types.LispVal>_R))
                   Lib.parseDottedList3
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <()>_R))
                   @ b1
                   s1
                   (\ (x :: [Types.LispVal])
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    Lib.parseDottedList2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: Types.LispVal)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       cok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       cerr (Text.Parsec.Error.mergeError err err')))
                   cerr
                   (\ (x :: [Types.LispVal])
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    Lib.parseDottedList2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: Types.LispVal)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
5de2b8c0a0be3403ffc6f2ce0d4c51d0
  parseDottedList2 ::
    [Types.LispVal]
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (Types.LispVal
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Types.LispVal
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U> -}
93d66833bcaeee009b327fbc32385a81
  parseDottedList3 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (()
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (()
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (w2 :: Text.Parsec.Prim.State GHC.Base.String ())
                   (w3 :: ()
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w5 :: ()
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w6 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Combinator.$wskipMany1
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ GHC.Types.Char
                   Lib.parseDottedList4
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   @ b
                   w2
                   w3
                   w4
                   w5
                   w6) -}
b6441c7c1245c40e9ec2f62bfb345f4a
  parseDottedList4 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b
                   (eta :: Text.Parsec.Prim.State GHC.Base.String ())
                   (eta1 :: GHC.Types.Char
                            -> Text.Parsec.Prim.State GHC.Base.String ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta3 :: GHC.Types.Char
                            -> Text.Parsec.Prim.State GHC.Base.String ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Prim.<?>2
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   Lib.parseDottedList6
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   Lib.parseDottedList5
                   @ b
                   eta
                   eta1
                   eta2
                   eta3
                   eta4) -}
e4972e792362f253b314413a1f8856a6
  parseDottedList5 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Text.Parsec.Char.space2
                   (GHC.Types.[] @ GHC.Base.String)) -}
030e5e27615571fea924c4ace61a9bc6
  parseDottedList6 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (\ @ b
                   (w2 :: Text.Parsec.Prim.State GHC.Base.String ())[OneShot]
                   (w3 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w5 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w6 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)[OneShot] ->
                 case w2 of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                 Text.Parsec.Char.$wsatisfy
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Lib.$s$fStream[]mtok @ GHC.Types.Char)
                   GHC.Unicode.isSpace
                   @ b
                   ww1
                   ww5
                   ww6
                   ww7
                   ww3
                   w3
                   w6 } }) -}
5479cc2c14ba98b0fc4dd6a2aeb72e14
  parseDottedList7 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (Types.LispVal
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Types.LispVal
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <S(LS(LSS)S),U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (w :: Text.Parsec.Prim.State GHC.Base.String ())
                   (w1 :: Types.LispVal
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: Types.LispVal
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 case w of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                 Lib.$wparseExpr @ b ww1 ww5 ww6 ww7 ww3 w1 w2 w3 w4 } }) -}
ef45661505ff949ebe8aad15fc15b72f
  parseExpr :: Text.Parsec.String.Parser Types.LispVal
  {- Arity: 5,
     Strictness: <S(LS(LSS)S),U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Lib.parseDottedList7
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Types.LispVal>_R)) -}
0407746fc6c6affe1ede068503885bd0
  parseHex :: Text.Parsec.String.Parser Types.LispVal
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.parseHex1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Types.LispVal>_R)) -}
e506359890bb1b7d9260211a91172903
  parseHex1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (eta :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta1 :: Types.LispVal
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta3 :: Types.LispVal
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Lib.parseHex_m1
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Types.Char>_R)
                   @ b1
                   eta
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Lib.parseHex2
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ (x1 :: Types.LispVal)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eta1 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta2
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Lib.parseHex2
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ (x1 :: Types.LispVal)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eta3 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
eec1fd0514ecfeb20928f3b91ef30f87
  parseHex2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: Types.LispVal
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: Types.LispVal
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Text.Parsec.Combinator.$wmany1
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ GHC.Types.Char
                   Lib.parseHex4
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   @ b1
                   s1
                   (\ (x :: GHC.Base.String) ->
                    cok
                      (Types.Number
                         (case Text.ParserCombinators.ReadP.run
                                 @ GHC.Integer.Type.Integer
                                 Lib.parseHex3
                                 x of wild {
                            [] -> case GHC.List.badHead ret_ty GHC.Integer.Type.Integer of {}
                            : x1 ds1 -> case x1 of wild1 { (,) x2 ds2 -> x2 } })))
                   cerr
                   (\ (x :: GHC.Base.String) ->
                    eok
                      (Types.Number
                         (case Text.ParserCombinators.ReadP.run
                                 @ GHC.Integer.Type.Integer
                                 Lib.parseHex3
                                 x of wild {
                            [] -> case GHC.List.badHead ret_ty GHC.Integer.Type.Integer of {}
                            : x1 ds1 -> case x1 of wild1 { (,) x2 ds2 -> x2 } })))
                   eerr) -}
4feef89d83827cbb938f47367dda88b2
  parseHex3 ::
    Text.ParserCombinators.ReadP.P GHC.Integer.Type.Integer
  {- Unfolding: (case Text.Read.Lex.$wreadIntP'
                        @ GHC.Integer.Type.Integer
                        GHC.Integer.Type.$fEqInteger
                        GHC.Num.$fNumInteger
                        Text.Read.Lex.readDecP3
                        @ GHC.Integer.Type.Integer
                        (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                           @ GHC.Integer.Type.Integer) of ww { Unit# ww1 ->
                 Text.ParserCombinators.ReadP.Get
                   @ GHC.Integer.Type.Integer
                   ww1 }) -}
2d50945883de03f76fd1c599c57faf9a
  parseHex4 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b
                   (eta :: Text.Parsec.Prim.State GHC.Base.String ())
                   (eta1 :: GHC.Types.Char
                            -> Text.Parsec.Prim.State GHC.Base.String ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta3 :: GHC.Types.Char
                            -> Text.Parsec.Prim.State GHC.Base.String ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Prim.<?>2
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   Lib.parseHex6
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   Lib.parseHex5
                   @ b
                   eta
                   eta1
                   eta2
                   eta3
                   eta4) -}
0a9e0c205a4839858b7ba8640941e817
  parseHex5 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Text.Parsec.Char.hexDigit2
                   (GHC.Types.[] @ GHC.Base.String)) -}
877e6cdafb216786b58d72363fb90be6
  parseHex6 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (\ @ b
                   (w2 :: Text.Parsec.Prim.State GHC.Base.String ())[OneShot]
                   (w3 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w5 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w6 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)[OneShot] ->
                 case w2 of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                 Text.Parsec.Char.$wsatisfy
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Lib.$s$fStream[]mtok @ GHC.Types.Char)
                   GHC.Unicode.isHexDigit
                   @ b
                   ww1
                   ww5
                   ww6
                   ww7
                   ww3
                   w3
                   w6 } }) -}
b8e0f374c41d7b557a44345c9e18776c
  parseHex7 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'x'#) -}
c0b0ba8aefdfa0bb9caf7a3df5c0b052
  parseHex_m1 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity GHC.Types.Char
  {- Unfolding: (Text.Parsec.Char.char
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Lib.$s$fStream[]mtok @ GHC.Types.Char)
                   Lib.parseHex7) -}
256f764341e8cab8f54134acea629af0
  parseList :: Text.Parsec.String.Parser Types.LispVal
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (0, True, True)
                Lib.parseList1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Types.LispVal>_R)) -}
4b842140cadb249b5b59134faf40d141
  parseList1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,A>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ b1
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: Types.LispVal
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w3 :: Types.LispVal
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1) ->
                 Lib.$wparseList @ b1 w w1 w2 w3) -}
cb9af49376666020e642a4b602bd5c98
  parseNum :: Text.Parsec.String.Parser Types.LispVal
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.parseNum1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Types.LispVal>_R)) -}
533438b34eb2dadf49868a4483d1d7f8
  parseNum1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: Types.LispVal
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: Types.LispVal
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Text.Parsec.Combinator.$wmany1
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ GHC.Types.Char
                   Lib.parseDec2
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   @ b1
                   s1
                   (\ (x :: GHC.Base.String) -> cok (Types.Number (Lib.parseDec_g x)))
                   cerr
                   (\ (x :: GHC.Base.String) -> eok (Types.Number (Lib.parseDec_g x)))
                   eerr) -}
8bd344b521d78d7d24a9ce9a7854c4af
  parseNumber :: Text.Parsec.String.Parser Types.LispVal
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Lib.parseNumber1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Types.LispVal>_R)) -}
861a9272d9d87799d60e65dcacbe3849
  parseNumber1 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (Types.LispVal
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Types.LispVal
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b
                   (s1 :: Text.Parsec.Prim.State GHC.Base.String ())
                   (cok :: Types.LispVal
                           -> Text.Parsec.Prim.State GHC.Base.String ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eok :: Types.LispVal
                           -> Text.Parsec.Prim.State GHC.Base.String ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 let {
                   lvl13 :: GHC.Base.String
                            -> Text.Parsec.Prim.State GHC.Base.String ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b
                     {- Arity: 1 -}
                   = \ (x :: GHC.Base.String) -> cok (Types.Number (Lib.parseDec_g x))
                 } in
                 Lib.parseNumber2
                   @ b
                   s1
                   cok
                   cerr
                   eok
                   (\ (err :: Text.Parsec.Error.ParseError) ->
                    Text.Parsec.Combinator.$wmany1
                      @ GHC.Base.String
                      @ Data.Functor.Identity.Identity
                      @ GHC.Types.Char
                      @ ()
                      @ GHC.Types.Char
                      Lib.parseDec2
                        `cast`
                      (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                <GHC.Base.String>_R
                                <()>_R
                                <Data.Functor.Identity.Identity>_R
                                <GHC.Types.Char>_R))
                      @ b
                      s1
                      lvl13
                      cerr
                      (\ (x :: GHC.Base.String)
                         (s' :: Text.Parsec.Prim.State GHC.Base.String ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok
                         (Types.Number (Lib.parseDec_g x))
                         s'
                         (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
5463a522e223f14723c1fe73d49b6199
  parseNumber2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (eta :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta1 :: Types.LispVal
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta3 :: Types.LispVal
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Lib.parseNumber_m1
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Types.Char>_R)
                   @ b1
                   eta
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Lib.parseNumber3
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ (x1 :: Types.LispVal)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eta1 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta2
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Lib.parseNumber3
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ (x1 :: Types.LispVal)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eta3 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
4f81811b48b6fc3534b5ab58d78fb4af
  parseNumber3 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (Types.LispVal
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Types.LispVal
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
47d481b78df67c8fb6472e5d275f286b
  parseNumber4 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# '#'#) -}
d456a4e460e154dd6a1b67fbadd6c8be
  parseNumber_m1 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity GHC.Types.Char
  {- Unfolding: (Text.Parsec.Char.char
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Lib.$s$fStream[]mtok @ GHC.Types.Char)
                   Lib.parseNumber4) -}
2f0f823bc9a861a767384b80abb7f7a0
  parseOct :: Text.Parsec.String.Parser Types.LispVal
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.parseOct1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Types.LispVal>_R)) -}
f41fcb65035f24fefdfefc66b873041d
  parseOct1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (eta :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta1 :: Types.LispVal
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta3 :: Types.LispVal
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Lib.parseOct_m1
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Types.Char>_R)
                   @ b1
                   eta
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Lib.parseOct2
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ (x1 :: Types.LispVal)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eta1 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta2
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Lib.parseOct2
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ (x1 :: Types.LispVal)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eta3 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
6da7417d502bce109dae2e74a294d9ea
  parseOct2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: Types.LispVal
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: Types.LispVal
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Text.Parsec.Combinator.$wmany1
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ GHC.Types.Char
                   Lib.parseOct4
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   @ b1
                   s1
                   (\ (x :: GHC.Base.String) ->
                    cok
                      (Types.Number
                         (case Text.ParserCombinators.ReadP.run
                                 @ GHC.Integer.Type.Integer
                                 Lib.parseOct3
                                 x of wild {
                            [] -> case GHC.List.badHead ret_ty GHC.Integer.Type.Integer of {}
                            : x1 ds1 -> case x1 of wild1 { (,) x2 ds2 -> x2 } })))
                   cerr
                   (\ (x :: GHC.Base.String) ->
                    eok
                      (Types.Number
                         (case Text.ParserCombinators.ReadP.run
                                 @ GHC.Integer.Type.Integer
                                 Lib.parseOct3
                                 x of wild {
                            [] -> case GHC.List.badHead ret_ty GHC.Integer.Type.Integer of {}
                            : x1 ds1 -> case x1 of wild1 { (,) x2 ds2 -> x2 } })))
                   eerr) -}
418a796abf549dc52c999ee7a1733fef
  parseOct3 ::
    Text.ParserCombinators.ReadP.P GHC.Integer.Type.Integer
  {- Unfolding: (case Text.Read.Lex.$wreadIntP'
                        @ GHC.Integer.Type.Integer
                        GHC.Integer.Type.$fEqInteger
                        GHC.Num.$fNumInteger
                        Text.Read.Lex.readDecP4
                        @ GHC.Integer.Type.Integer
                        (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                           @ GHC.Integer.Type.Integer) of ww { Unit# ww1 ->
                 Text.ParserCombinators.ReadP.Get
                   @ GHC.Integer.Type.Integer
                   ww1 }) -}
325f2a06d4679628c0438dc6a6863252
  parseOct4 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b
                   (eta :: Text.Parsec.Prim.State GHC.Base.String ())
                   (eta1 :: GHC.Types.Char
                            -> Text.Parsec.Prim.State GHC.Base.String ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta3 :: GHC.Types.Char
                            -> Text.Parsec.Prim.State GHC.Base.String ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Prim.<?>2
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   Lib.parseOct6
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   Lib.parseOct5
                   @ b
                   eta
                   eta1
                   eta2
                   eta3
                   eta4) -}
10a2b8f6000dd3830934a162610d519e
  parseOct5 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Text.Parsec.Char.octDigit2
                   (GHC.Types.[] @ GHC.Base.String)) -}
d368316f80102eb9b251f64754db45d0
  parseOct6 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (\ @ b
                   (w2 :: Text.Parsec.Prim.State GHC.Base.String ())[OneShot]
                   (w3 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w5 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w6 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)[OneShot] ->
                 case w2 of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                 Text.Parsec.Char.$wsatisfy
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Lib.$s$fStream[]mtok @ GHC.Types.Char)
                   GHC.Unicode.isOctDigit
                   @ b
                   ww1
                   ww5
                   ww6
                   ww7
                   ww3
                   w3
                   w6 } }) -}
2494aa100c83de7d55cad1da6bc38b58
  parseOct7 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'o'#) -}
26c6f8d44a1c9fd564b6ec505577085f
  parseOct_m1 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity GHC.Types.Char
  {- Unfolding: (Text.Parsec.Char.char
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Lib.$s$fStream[]mtok @ GHC.Types.Char)
                   Lib.parseOct7) -}
e49048dcc911eba834a8e7a884867572
  parseQuoted :: Text.Parsec.String.Parser Types.LispVal
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.parseQuoted1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Types.LispVal>_R)) -}
b87f5a501fdd05e27ee1925b4cc19735
  parseQuoted1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (eta :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta1 :: Types.LispVal
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta3 :: Types.LispVal
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Lib.parseQuoted_m1
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Types.Char>_R)
                   @ b1
                   eta
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    case s2 of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                    case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                    Lib.$wk
                      @ b1
                      ww1
                      ww5
                      ww6
                      ww7
                      ww3
                      eta1
                      eta2
                      (\ (x1 :: Types.LispVal)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eta1 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eta2 (Text.Parsec.Error.mergeError err err')) } })
                   eta2
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    case s2 of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                    case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                    Lib.$wk
                      @ b1
                      ww1
                      ww5
                      ww6
                      ww7
                      ww3
                      eta1
                      eta2
                      (\ (x1 :: Types.LispVal)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eta3 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eta4 (Text.Parsec.Error.mergeError err err')) } })
                   eta4) -}
f6a4069c6ecc92c63a280100bf4a7d66
  parseQuoted2 :: Types.LispVal
  {- Strictness: m1, Unfolding: (Types.Atom Lib.parseQuoted3) -}
859a308f67402a131894f0f5edbace6d
  parseQuoted3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "quote"#) -}
3eec10cd31291582537bb4a3c544ffc9
  parseQuoted4 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# '\''#) -}
9237b7b63bd0b16b4470cbb2f42ff996
  parseQuoted_m1 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity GHC.Types.Char
  {- Unfolding: (Text.Parsec.Char.char
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Lib.$s$fStream[]mtok @ GHC.Types.Char)
                   Lib.parseQuoted4) -}
38b736bd8c59741bba32380ebbb1e9e6
  parseRadix :: Text.Parsec.String.Parser Types.LispVal
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.parseNumber2
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Types.LispVal>_R)) -}
b0917294b5cfb9719c85dae6b83b5393
  parseString :: Text.Parsec.String.Parser Types.LispVal
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.parseString1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Types.LispVal>_R)) -}
fbfc3531fe13ae9db5410b292cdc4dae
  parseString1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: Types.LispVal
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: Types.LispVal
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Lib.parseString4
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Types.Char>_R)
                   @ b1
                   s1
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Lib.parseString2
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: Types.LispVal)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       cok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       cerr (Text.Parsec.Error.mergeError err err')))
                   cerr
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Lib.parseString2
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: Types.LispVal)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))
                   eerr) -}
261ac8d30c48d35b69968d7213be7516
  parseString2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Types.LispVal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: Types.LispVal
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: Types.LispVal
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Text.Parsec.Prim.$wmany
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   Lib.parseString5
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   @ b1
                   s1
                   (\ (x :: [GHC.Types.Char])
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    Lib.parseString3
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: Types.LispVal)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       cok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       cerr (Text.Parsec.Error.mergeError err err')))
                   cerr
                   (\ (x :: [GHC.Types.Char])
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    Lib.parseString3
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: Types.LispVal)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
61914ef1237eb80ea695e126b3518c9b
  parseString3 ::
    [GHC.Types.Char]
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (Types.LispVal
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Types.LispVal
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ (x :: [GHC.Types.Char])
                   @ b
                   (eta :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta1 :: Types.LispVal
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta3 :: Types.LispVal
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 let {
                   x1 :: Types.LispVal = Types.String x
                 } in
                 Lib.parseString4
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Types.Char>_R)
                   @ b
                   eta
                   (\ (x2 :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    eta1
                      x1
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta2
                   (\ (x2 :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    eta3
                      x1
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta4) -}
55f96682057fadd61d6e8d11c8b8072d
  parseString4 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Types.Char
  {- Unfolding: (Text.Parsec.Char.char
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Lib.$s$fStream[]mtok @ GHC.Types.Char)
                   Lib.escapedChars10) -}
601847c91e7d2793889b6d99a8e65aa0
  parseString5 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,A><L,C(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ b
                   (w :: Text.Parsec.Prim.State GHC.Base.String ())
                   (w1 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 Lib.$wlvl @ b w w1 w2 w4) -}
37146996e668e7dbdf7af8eeaa0f22f4
  parseString6 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Lib.escapedChars11
                   Lib.parseString7) -}
bbb3ce4243fb254a4cc96b2acbac7b85
  parseString7 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Lib.escapedChars10
                   (GHC.Types.[] @ GHC.Types.Char)) -}
433a8be3957ec9987e32dbcd746e30bd
  readExpr :: GHC.Base.String -> Types.ThrowsError Types.LispVal
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (input :: GHC.Base.String) ->
                 case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Char
                         @ ()
                         @ Types.LispVal
                         (Lib.$s$fStream[]mtok @ GHC.Types.Char)
                         Lib.parseDottedList7
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <GHC.Base.String>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <Types.LispVal>_R))
                         GHC.Tuple.()
                         Lib.readExpr1
                         input)
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError Types.LispVal>_R) of wild {
                   Data.Either.Left err
                   -> Data.Either.Left
                        @ Types.LispError
                        @ Types.LispVal
                        (Types.Parser err)
                   Data.Either.Right val
                   -> Data.Either.Right @ Types.LispError @ Types.LispVal val }) -}
482e8aaf2cb184bb1567feeacc8ddd1b
  readExpr1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "lisp"#) -}
d984ced6970683a88d93fc52e03c58a0
  readWith :: [(a, b)] -> a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a @ b (x :: [(a, b)]) ->
                 case x of wild {
                   [] -> case GHC.List.badHead ret_ty a of {}
                   : x1 ds1 -> case x1 of wild1 { (,) x2 ds2 -> x2 } }) -}
7370cfc7e9d7606b3c111f517145d14b
  spaces :: Text.Parsec.String.Parser ()
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.parseDottedList3
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <()>_R)) -}
8054150dd64f13bb76365ebcda9eafa4
  symbol :: Text.Parsec.String.Parser GHC.Types.Char
  {- Arity: 5,
     Strictness: <S(LS(LSS)S),1*U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,A><L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Lib.symbol1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <GHC.Types.Char>_R)) -}
932489188338c855b915d2d739826c6c
  symbol1 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <S(LS(LSS)S),1*U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,A><L,A><L,C(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (w :: Text.Parsec.Prim.State GHC.Base.String ())
                   (w1 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 case w of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                 Text.Parsec.Char.$wsatisfy
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Lib.$s$fStream[]mtok @ GHC.Types.Char)
                   Lib.symbol2
                   @ b
                   ww1
                   ww5
                   ww6
                   ww7
                   ww3
                   w1
                   w4 } }) -}
7f0a8e7e77a9951900e0a3f270bdccb8
  symbol2 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1,
     Unfolding: (\ (c :: GHC.Types.Char) ->
                 GHC.List.elem
                   @ GHC.Types.Char
                   GHC.Classes.$fEqChar
                   c
                   Lib.symbol3) -}
5c069fe72a15fa1f81845c5d4c2205fa
  symbol3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "!#$%&|*+-/:<=>?@^_~"#) -}
320deeecabd48e3ceddeefa50deb5f78
  trapError ::
    (Control.Monad.Error.Class.MonadError a m, GHC.Show.Show a) =>
    m [GHC.Types.Char] -> m [GHC.Types.Char]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLC(C(S))),U(1*U,A,1*C1(C1(U)))><L,1*U(A,1*U,A)><L,U>,
     Unfolding: (\ @ (m :: * -> *)
                   @ a
                   ($dMonadError :: Control.Monad.Error.Class.MonadError a m)
                   ($dShow :: GHC.Show.Show a)
                   (eta :: m [GHC.Types.Char]) ->
                 Control.Monad.Error.Class.catchError
                   @ a
                   @ m
                   $dMonadError
                   @ [GHC.Types.Char]
                   eta
                   (let {
                      f :: GHC.Base.Monad m
                      = Control.Monad.Error.Class.$p1MonadError @ a @ m $dMonadError
                    } in
                    let {
                      f1 :: [GHC.Types.Char] -> m [GHC.Types.Char]
                      = GHC.Base.return @ m f @ [GHC.Types.Char]
                    } in
                    let {
                      g :: a -> [GHC.Types.Char] = GHC.Show.show @ a $dShow
                    } in
                    \ (x :: a) -> f1 (g x))) -}
"SPEC/Lib $fStream[]mtok @ Identity _" [ALWAYS] forall @ tok
                                                       ($dMonad :: GHC.Base.Monad
                                                                     Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok @ Data.Functor.Identity.Identity
                                  @ tok
                                  $dMonad
  = Lib.$s$fStream[]mtok @ tok
"SPEC/Lib $fStream[]mtok_$cp1Stream @ Identity _" [ALWAYS] forall @ tok
                                                                  ($dMonad :: GHC.Base.Monad
                                                                                Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok_$cp1Stream @ Data.Functor.Identity.Identity
                                             @ tok
                                             $dMonad
  = Lib.$s$fStream[]mtok_$s$fStream[]mtok_$cp1Stream @ tok
"SPEC/Lib $fStream[]mtok_$cuncons @ Identity _" [ALWAYS] forall @ tok
                                                                ($dMonad :: GHC.Base.Monad
                                                                              Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok_$cuncons @ Data.Functor.Identity.Identity
                                           @ tok
                                           $dMonad
  = Lib.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons @ tok
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

