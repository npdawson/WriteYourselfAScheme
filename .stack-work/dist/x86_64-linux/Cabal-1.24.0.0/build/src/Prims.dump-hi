
==================== FINAL INTERFACE ====================
2016-10-07 08:14:17.699838747 UTC

interface WriteYourselfAScheme-0.1.0.0-9XCnyXZ9nZK8zfaQQc7IOM:Prims 8001
  interface hash: 8a5a2b72bb3f3fd8a6a09f9778554ad2
  ABI hash: 2501dff3294872c349493d227e42a111
  export-list hash: c941dd0915bf8763c9e99689f40fd6a0
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Prims.boolBinop
  Prims.boolBoolBinop
  Prims.car
  Prims.cdr
  Prims.cons
  Prims.equal
  Prims.eqv
  Prims.numBoolBinop
  Prims.numberp
  Prims.numericBinop
  Prims.primitives
  Prims.strBoolBinop
  Prims.stringToSymbol
  Prims.stringp
  Prims.symbolToString
  Prims.symbolp
  Prims.unpackBool
  Prims.unpackEquals
  Prims.unpackNum
  Prims.unpackStr
module dependencies: Types
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      parsec-3.1.11@parsec-3.1.11-IYEP8Lv1S9x5FeUQxGPDBY
                      text-1.2.2.1@text-1.2.2.1-FgcR4Xf0VlEHD9HLxzq9WJ
                      transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         text-1.2.2.1@text-1.2.2.1-FgcR4Xf0VlEHD9HLxzq9WJ:Data.Text
         text-1.2.2.1@text-1.2.2.1-FgcR4Xf0VlEHD9HLxzq9WJ:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-FgcR4Xf0VlEHD9HLxzq9WJ:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-FgcR4Xf0VlEHD9HLxzq9WJ:Data.Text
                         text-1.2.2.1@text-1.2.2.1-FgcR4Xf0VlEHD9HLxzq9WJ:Data.Text.Lazy
import  -/  Types d92fdf7f46d3fbbc1da4bae29b0cf88a
  exports: 23123cfd6e8c1d4f3a359ea100b16a6e
  AnyUnpacker 5f6716c50933693b73dbcfe22770c0b7
  Atom 583eda294242993ab6a0a7d3e132409a
  Bool 9e3e1d74854a3698cab4e0d84163ed91
  DottedList 2fd300f0400392c68250094c09f547a2
  LispVal 7d6381db5dd1588eb623f9864236a373
  List 12eb699d730e06936320a5b87c8b2d9b
  NumArgs c416be01daca8ed8098153be92530a73
  Number f790ed413e986d997a0514b078c51b54
  String 68e2c03825e66bb5d503a4ce9f7cd810
  ThrowsError b8da91a86139021cb5612f2f791c1fda
  TypeMismatch fd59ee226e0ee8f81a89affbec5a1641
  Unpacker f19c8d50303db580d29df7c365457ad6
import  -/  base-4.9.0.0:Data.Either bd9f099b82d4ed2d98c56d7144ac6957
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.Functor 6fc476505db88d678632a4a838125f13
import  -/  base-4.9.0.0:Data.Traversable 7ce5b7ee67475ac3d03ae825b86efd9f
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:Text.Read 9c1be14f7e5eac8b18bcb566c5763677
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 62c0e736506aac47ef40569f5b82e19d
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Error.Class f139fe3464686c34428880c6a5173636
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Except 99ba8f4995df0e7f2f512551a0ca666a
f5c20a1593a77542df2efa6edbd4e5af
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Prims.$trModule2 Prims.$trModule1) -}
fd16041784d0412752bbefe56fdf50af
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Prims"#) -}
ffa1359194a203c2b811128ede00f51e
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "WriteYourselfAScheme-0.1.0.0-9XCnyXZ9nZK8zfaQQc7IOM"#) -}
203ebdc52e7d84b421a4990dcfc87464
  boolBinop ::
    (Types.LispVal -> Types.ThrowsError a)
    -> (a -> a -> GHC.Types.Bool)
    -> [Types.LispVal]
    -> Types.ThrowsError Types.LispVal
  {- Arity: 3, Strictness: <L,C(U)><L,1*C1(C1(U))><S,U>,
     Unfolding: (\ @ a
                   (unpacker :: Types.LispVal -> Types.ThrowsError a)
                   (op :: a -> a -> GHC.Types.Bool)
                   (args :: [Types.LispVal]) ->
                 case GHC.List.$wlenAcc @ Types.LispVal args 0# of ww2 {
                   DEFAULT
                   -> Data.Either.Left
                        @ Types.LispError
                        @ Types.LispVal
                        (Types.NumArgs Prims.boolBinop1 args)
                   2#
                   -> case unpacker (GHC.List.$w!! @ Types.LispVal args 0#) of wild {
                        Data.Either.Left l
                        -> Data.Either.Left @ Types.LispError @ Types.LispVal l
                        Data.Either.Right r
                        -> case unpacker (GHC.List.$w!! @ Types.LispVal args 1#) of wild1 {
                             Data.Either.Left l
                             -> Data.Either.Left @ Types.LispError @ Types.LispVal l
                             Data.Either.Right r1
                             -> Data.Either.Right
                                  @ Types.LispError
                                  @ Types.LispVal
                                  (Types.Bool (op r r1)) } } }) -}
009f433e92406d92f24bf0fb6c35d5a7
  boolBinop1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
3da68afa45b37923e238875f18447579
  boolBoolBinop ::
    (GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 2,
     Unfolding: (Prims.boolBinop @ GHC.Types.Bool Prims.unpackBool) -}
41052b35d2d97187d93b90a919daa2bd
  car :: [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Types.LispVal]) ->
                 case ds of wild {
                   [] -> Prims.car3
                   : ds1 ds2
                   -> case ds1 of wild1 {
                        DEFAULT
                        -> case ds2 of wild2 {
                             []
                             -> Data.Either.Left
                                  @ Types.LispError
                                  @ Types.LispVal
                                  (Types.TypeMismatch Prims.car2 wild1)
                             : ipv ipv1
                             -> Data.Either.Left
                                  @ Types.LispError
                                  @ Types.LispVal
                                  (Types.NumArgs Prims.car1 wild) }
                        Types.List ds3
                        -> case ds3 of wild2 {
                             []
                             -> case ds2 of wild3 {
                                  []
                                  -> Data.Either.Left
                                       @ Types.LispError
                                       @ Types.LispVal
                                       (Types.TypeMismatch Prims.car2 wild1)
                                  : ipv ipv1
                                  -> Data.Either.Left
                                       @ Types.LispError
                                       @ Types.LispVal
                                       (Types.NumArgs Prims.car1 wild) }
                             : x ds4
                             -> case ds2 of wild3 {
                                  [] -> Data.Either.Right @ Types.LispError @ Types.LispVal x
                                  : ipv ipv1
                                  -> Data.Either.Left
                                       @ Types.LispError
                                       @ Types.LispVal
                                       (Types.NumArgs Prims.car1 wild) } }
                        Types.DottedList ds3 ds4
                        -> case ds3 of wild2 {
                             []
                             -> case ds2 of wild3 {
                                  []
                                  -> Data.Either.Left
                                       @ Types.LispError
                                       @ Types.LispVal
                                       (Types.TypeMismatch Prims.car2 wild1)
                                  : ipv ipv1
                                  -> Data.Either.Left
                                       @ Types.LispError
                                       @ Types.LispVal
                                       (Types.NumArgs Prims.car1 wild) }
                             : x ds5
                             -> case ds2 of wild3 {
                                  [] -> Data.Either.Right @ Types.LispError @ Types.LispVal x
                                  : ipv ipv1
                                  -> Data.Either.Left
                                       @ Types.LispError
                                       @ Types.LispVal
                                       (Types.NumArgs Prims.car1 wild) } } } }) -}
055435ea564a2c9131c9ee8063becc09
  car1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
f5a4dcbe0ec3ea59b2de969e30edb77e
  car2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "pair"#) -}
306d75aa818abd8d8bc3488937fe2b31
  car3 :: Types.ThrowsError Types.LispVal
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ Types.LispError
                   @ Types.LispVal
                   Prims.car4) -}
44cb573256041f5c636ab8237d39459f
  car4 :: Types.LispError
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Types.NumArgs
                   Prims.car1
                   (GHC.Types.[] @ Types.LispVal)) -}
67d3be511cf2e30f5c9a4990c3fa470e
  cdr :: [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Types.LispVal]) ->
                 case ds of wild {
                   [] -> Prims.car3
                   : ds1 ds2
                   -> case ds1 of wild1 {
                        DEFAULT
                        -> case ds2 of wild2 {
                             []
                             -> Data.Either.Left
                                  @ Types.LispError
                                  @ Types.LispVal
                                  (Types.TypeMismatch Prims.car2 wild1)
                             : ipv ipv1
                             -> Data.Either.Left
                                  @ Types.LispError
                                  @ Types.LispVal
                                  (Types.NumArgs Prims.car1 wild) }
                        Types.List ds3
                        -> case ds3 of wild2 {
                             []
                             -> case ds2 of wild3 {
                                  []
                                  -> Data.Either.Left
                                       @ Types.LispError
                                       @ Types.LispVal
                                       (Types.TypeMismatch Prims.car2 wild1)
                                  : ipv ipv1
                                  -> Data.Either.Left
                                       @ Types.LispError
                                       @ Types.LispVal
                                       (Types.NumArgs Prims.car1 wild) }
                             : ds4 xs
                             -> case ds2 of wild3 {
                                  []
                                  -> Data.Either.Right
                                       @ Types.LispError
                                       @ Types.LispVal
                                       (Types.List xs)
                                  : ipv ipv1
                                  -> Data.Either.Left
                                       @ Types.LispError
                                       @ Types.LispVal
                                       (Types.NumArgs Prims.car1 wild) } }
                        Types.DottedList ds3 x
                        -> case ds3 of wild2 {
                             []
                             -> case ds2 of wild3 {
                                  []
                                  -> Data.Either.Left
                                       @ Types.LispError
                                       @ Types.LispVal
                                       (Types.TypeMismatch Prims.car2 wild1)
                                  : ipv ipv1
                                  -> Data.Either.Left
                                       @ Types.LispError
                                       @ Types.LispVal
                                       (Types.NumArgs Prims.car1 wild) }
                             : ds4 ds5
                             -> case ds5 of wild3 {
                                  []
                                  -> case ds2 of wild4 {
                                       [] -> Data.Either.Right @ Types.LispError @ Types.LispVal x
                                       : ipv ipv1
                                       -> Data.Either.Left
                                            @ Types.LispError
                                            @ Types.LispVal
                                            (Types.NumArgs Prims.car1 wild) }
                                  : ipv ipv1
                                  -> case ds2 of wild4 {
                                       []
                                       -> Data.Either.Right
                                            @ Types.LispError
                                            @ Types.LispVal
                                            (Types.DottedList wild3 x)
                                       : ipv2 ipv3
                                       -> Data.Either.Left
                                            @ Types.LispError
                                            @ Types.LispVal
                                            (Types.NumArgs Prims.car1 wild) } } } } }) -}
1a03eabbad5240e2ae8c1bc7c89eb69b
  cons :: [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Types.LispVal]) ->
                 case ds of wild {
                   [] -> Prims.cons1
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> Data.Either.Left
                             @ Types.LispError
                             @ Types.LispVal
                             (Types.NumArgs Prims.boolBinop1 wild)
                        : ds2 ds3
                        -> case ds2 of wild2 {
                             DEFAULT
                             -> case ds3 of wild3 {
                                  []
                                  -> Data.Either.Right
                                       @ Types.LispError
                                       @ Types.LispVal
                                       (Types.DottedList
                                          (GHC.Types.:
                                             @ Types.LispVal
                                             x
                                             (GHC.Types.[] @ Types.LispVal))
                                          wild2)
                                  : ipv ipv1
                                  -> Data.Either.Left
                                       @ Types.LispError
                                       @ Types.LispVal
                                       (Types.NumArgs Prims.boolBinop1 wild) }
                             Types.List ds4
                             -> case ds4 of wild3 {
                                  []
                                  -> case ds3 of wild4 {
                                       []
                                       -> Data.Either.Right
                                            @ Types.LispError
                                            @ Types.LispVal
                                            (Types.List
                                               (GHC.Types.:
                                                  @ Types.LispVal
                                                  x
                                                  (GHC.Types.[] @ Types.LispVal)))
                                       : ipv ipv1
                                       -> Data.Either.Left
                                            @ Types.LispError
                                            @ Types.LispVal
                                            (Types.NumArgs Prims.boolBinop1 wild) }
                                  : ipv ipv1
                                  -> case ds3 of wild4 {
                                       []
                                       -> Data.Either.Right
                                            @ Types.LispError
                                            @ Types.LispVal
                                            (Types.List (GHC.Types.: @ Types.LispVal x wild3))
                                       : ipv2 ipv3
                                       -> Data.Either.Left
                                            @ Types.LispError
                                            @ Types.LispVal
                                            (Types.NumArgs Prims.boolBinop1 wild) } }
                             Types.DottedList xs xlast
                             -> case ds3 of wild3 {
                                  []
                                  -> Data.Either.Right
                                       @ Types.LispError
                                       @ Types.LispVal
                                       (Types.DottedList (GHC.Types.: @ Types.LispVal x xs) xlast)
                                  : ipv ipv1
                                  -> Data.Either.Left
                                       @ Types.LispError
                                       @ Types.LispVal
                                       (Types.NumArgs Prims.boolBinop1 wild) } } } }) -}
643066c41d8e5193caf3986006e78297
  cons1 :: Types.ThrowsError Types.LispVal
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ Types.LispError
                   @ Types.LispVal
                   Prims.cons2) -}
cd136a6914e2f89bc46a86a40b7d29e9
  cons2 :: Types.LispError
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Types.NumArgs
                   Prims.boolBinop1
                   (GHC.Types.[] @ Types.LispVal)) -}
9f5c2bdc77d905ec080d93a893d322fc
  equal :: [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Types.LispVal]) ->
                 case ds of wild {
                   [] -> Prims.cons1
                   : arg1 ds1
                   -> case ds1 of wild1 {
                        []
                        -> Data.Either.Left
                             @ Types.LispError
                             @ Types.LispVal
                             (Types.NumArgs Prims.boolBinop1 wild)
                        : arg2 ds2
                        -> case ds2 of wild2 {
                             []
                             -> letrec {
                                  go1 :: [Types.Unpacker]
                                         -> Data.Either.Either Types.LispError [GHC.Types.Bool]
                                    {- Arity: 1, Strictness: <S,1*U> -}
                                  = \ (ds3 :: [Types.Unpacker]) ->
                                    case ds3 of wild3 {
                                      [] -> Prims.equal_z
                                      : y ys
                                      -> case y of wild4 { Types.AnyUnpacker a $dEq unpacker ->
                                         case unpacker arg1 of wild5 {
                                           Data.Either.Left l
                                           -> case go1 ys of wild6 {
                                                Data.Either.Left x -> wild6
                                                Data.Either.Right y1
                                                -> Data.Either.Right
                                                     @ Types.LispError
                                                     @ [GHC.Types.Bool]
                                                     (GHC.Types.:
                                                        @ GHC.Types.Bool
                                                        GHC.Types.False
                                                        y1) }
                                           Data.Either.Right r
                                           -> case unpacker arg2 of wild6 {
                                                Data.Either.Left l
                                                -> case go1 ys of wild7 {
                                                     Data.Either.Left x -> wild7
                                                     Data.Either.Right y1
                                                     -> Data.Either.Right
                                                          @ Types.LispError
                                                          @ [GHC.Types.Bool]
                                                          (GHC.Types.:
                                                             @ GHC.Types.Bool
                                                             GHC.Types.False
                                                             y1) }
                                                Data.Either.Right r1
                                                -> case go1 ys of wild7 {
                                                     Data.Either.Left x -> wild7
                                                     Data.Either.Right y1
                                                     -> Data.Either.Right
                                                          @ Types.LispError
                                                          @ [GHC.Types.Bool]
                                                          (GHC.Types.:
                                                             @ GHC.Types.Bool
                                                             (GHC.Classes.== @ a $dEq r r1)
                                                             y1) } } } } }
                                } in
                                case go1 Prims.equal2 of wild3 {
                                  Data.Either.Left x
                                  -> Data.Either.Left @ Types.LispError @ Types.LispVal x
                                  Data.Either.Right y
                                  -> case Prims.eqv
                                            (GHC.Types.:
                                               @ Types.LispVal
                                               arg1
                                               (GHC.Types.:
                                                  @ Types.LispVal
                                                  arg2
                                                  (GHC.Types.[] @ Types.LispVal))) of wild4 {
                                       Data.Either.Left l -> wild4
                                       Data.Either.Right r
                                       -> Data.Either.Right
                                            @ Types.LispError
                                            @ Types.LispVal
                                            (Types.Bool
                                               (case (Prims.equal_go y)
                                                       `cast`
                                                     (Data.Monoid.N:Any[0]) of wild5 {
                                                  GHC.Types.False
                                                  -> case r of wild6 {
                                                       DEFAULT
                                                       -> case Prims.equal1
                                                          ret_ty GHC.Types.Bool
                                                          of {}
                                                       Types.Bool x -> x }
                                                  GHC.Types.True -> GHC.Types.True })) } }
                             : ipv ipv1
                             -> Data.Either.Left
                                  @ Types.LispError
                                  @ Types.LispVal
                                  (Types.NumArgs Prims.boolBinop1 wild) } } }) -}
5addfdd04eb22ee9e244b1fb54777324
  equal1 :: (GHC.Types.Bool)
  {- Strictness: x -}
242e37938e53b752c6a3caf5bd880bb8
  equal2 :: [Types.Unpacker]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.Unpacker
                   Prims.equal7
                   Prims.equal3) -}
b6cbbdbea8e2e3cb20b41a2fa52e6015
  equal3 :: [Types.Unpacker]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.Unpacker
                   Prims.equal6
                   Prims.equal4) -}
9c6300cf67e6a153c8998450b148191d
  equal4 :: [Types.Unpacker]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.Unpacker
                   Prims.equal5
                   (GHC.Types.[] @ Types.Unpacker)) -}
68db60df6c30cb55103b349f73846651
  equal5 :: Types.Unpacker
  {- Unfolding: (Types.AnyUnpacker
                   @ GHC.Base.String
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   Prims.unpackStr) -}
cb12ba4369b8d81ac59f12c2656411bf
  equal6 :: Types.Unpacker
  {- Unfolding: (Types.AnyUnpacker
                   @ GHC.Types.Bool
                   GHC.Classes.$fEqBool
                   Prims.unpackBool) -}
65c1140ea6be0ed6825bfa78fccf2a3e
  equal7 :: Types.Unpacker
  {- Unfolding: (Types.AnyUnpacker
                   @ GHC.Integer.Type.Integer
                   GHC.Integer.Type.$fEqInteger
                   Prims.unpackNum) -}
e1ff09466ba46332758ed48809dd1008
  equal_go :: [GHC.Types.Bool] -> Data.Monoid.Any
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
22cb8e73d8538ee88318d8a9006fba38
  equal_z :: Data.Either.Either Types.LispError [GHC.Types.Bool]
  {- HasNoCafRefs,
     Unfolding: (Data.Either.Right
                   @ Types.LispError
                   @ [GHC.Types.Bool]
                   (GHC.Types.[] @ GHC.Types.Bool)) -}
9ee5c9e0352fae4790c9cc6c19639a93
  eqv :: [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 1, Strictness: <S,1*U> -}
1ecdea9e20a831d634936df07548de0f
  numBoolBinop ::
    (GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 2,
     Unfolding: (Prims.boolBinop
                   @ GHC.Integer.Type.Integer
                   Prims.unpackNum) -}
f2445ce61751c5c8e63c6dac7657f70f
  numberp :: [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Types.LispVal]) ->
                 case ds of wild {
                   [] -> Prims.car3
                   : ds1 ds2
                   -> case ds1 of wild1 {
                        DEFAULT
                        -> case ds2 of wild2 {
                             [] -> Prims.numberp3
                             : ipv ipv1
                             -> Data.Either.Left
                                  @ Types.LispError
                                  @ Types.LispVal
                                  (Types.NumArgs Prims.car1 wild) }
                        Types.Number ds3
                        -> case ds2 of wild2 {
                             [] -> Prims.numberp1
                             : ipv ipv1
                             -> Data.Either.Left
                                  @ Types.LispError
                                  @ Types.LispVal
                                  (Types.NumArgs Prims.car1 wild) } } }) -}
1ba2f79604c9d3bbb2a136e9afbea927
  numberp1 :: Types.ThrowsError Types.LispVal
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ Types.LispError
                   @ Types.LispVal
                   Prims.numberp2) -}
cfe02fe9224567248324897178f1508c
  numberp2 :: Types.LispVal
  {- HasNoCafRefs, Strictness: m6,
     Unfolding: (Types.Bool GHC.Types.True) -}
c02d19b3a56fbbd233bea753c20fe80f
  numberp3 :: Types.ThrowsError Types.LispVal
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ Types.LispError
                   @ Types.LispVal
                   Prims.numberp4) -}
fa5a50b92d08f0bb8fe8c8972ffb272b
  numberp4 :: Types.LispVal
  {- HasNoCafRefs, Strictness: m6,
     Unfolding: (Types.Bool GHC.Types.False) -}
312e63588b556b9a464cf7fb59d83790
  numericBinop ::
    (GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)
    -> [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>,
     Unfolding: (\ (ds :: GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)
                   (ds1 :: [Types.LispVal]) ->
                 case ds1 of wild {
                   [] -> Prims.cons1
                   : ds2 ds3
                   -> case ds3 of wild1 {
                        []
                        -> Data.Either.Left
                             @ Types.LispError
                             @ Types.LispVal
                             (Types.NumArgs Prims.boolBinop1 wild)
                        : ipv ipv1
                        -> case Prims.numericBinop_go wild of wild2 {
                             Data.Either.Left x
                             -> Data.Either.Left @ Types.LispError @ Types.LispVal x
                             Data.Either.Right y
                             -> Data.Either.Right
                                  @ Types.LispError
                                  @ Types.LispVal
                                  (Types.Number
                                     (GHC.List.foldl1 @ GHC.Integer.Type.Integer ds y)) } } }) -}
074b0aad756c4d48ee7d0cbb58e6d737
  numericBinop_go ::
    [Types.LispVal]
    -> Data.Either.Either Types.LispError [GHC.Integer.Type.Integer]
  {- Arity: 1, Strictness: <S,1*U> -}
ee74dd30ee5affa970dd02b48b664796
  primitives ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives110
                   Prims.primitives1) -}
4046ab0514d43892ef2d52e6ff70ca8d
  primitives1 ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives107
                   Prims.primitives2) -}
e380b16ba218ccf25f065ae85dff9cf5
  primitives10 ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives84
                   Prims.primitives11) -}
9a4f29c4b9101f09ec811690742d2abe
  primitives100 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "mod"#) -}
8e37650248774c6a369e21e76bd6f42c
  primitives101 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m,
     Unfolding: ((Prims.primitives103, Prims.primitives102)) -}
f4c941f4e3f74d2a68cb27f83a8cae13
  primitives102 :: [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 1,
     Unfolding: (Prims.numericBinop GHC.Real.$fIntegralInteger_$cdiv) -}
a1d718d1ad6b4081078c74119c66c22a
  primitives103 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/"#) -}
38b391eb0653e60f7641b9bbdfa0c5a3
  primitives104 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m,
     Unfolding: ((Prims.primitives106, Prims.primitives105)) -}
090eac8aacce76682672e809e3f9da18
  primitives105 :: [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 1,
     Unfolding: (Prims.numericBinop GHC.Integer.Type.timesInteger) -}
254bfbb0668ea05987081e4c1abf07b0
  primitives106 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "*"#) -}
a6a6d5585293201bfe80ad6c4e7d420d
  primitives107 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m,
     Unfolding: ((Prims.primitives109, Prims.primitives108)) -}
e339d73dcf3f260a42d686109b27fd17
  primitives108 :: [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 1,
     Unfolding: (Prims.numericBinop GHC.Integer.Type.minusInteger) -}
d0c3d6775d6465c79b6d0dbc0400dfaa
  primitives109 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "-"#) -}
85bf76be4d3c191359fe8e1b35d8c59a
  primitives11 ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives82
                   Prims.primitives12) -}
de1f49eea409ff7ebea6adf074b2bd6d
  primitives110 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m,
     Unfolding: ((Prims.primitives112, Prims.primitives111)) -}
02b3899c677b1fce361a841cc2bc8ccd
  primitives111 :: [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 1,
     Unfolding: (Prims.numericBinop GHC.Integer.Type.plusInteger) -}
68e2b277b8adc3a09cd0b9f10e6abf8d
  primitives112 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "+"#) -}
5008e3a184ebbd8d6079dd0b942f7803
  primitives12 ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives79
                   Prims.primitives13) -}
e131d4fb23d308ec4bdd0b3ce92c7949
  primitives13 ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives76
                   Prims.primitives14) -}
1158258e9f6bc8148579e66cf6df4e87
  primitives14 ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives73
                   Prims.primitives15) -}
63278b90f1a0b008f023f229912b1ade
  primitives15 ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives70
                   Prims.primitives16) -}
35959ff548ae5a275ae29a996014db20
  primitives16 ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives67
                   Prims.primitives17) -}
4f015b2376ed1959447a3a919ab5533d
  primitives17 ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives64
                   Prims.primitives18) -}
4cc0305aa95975df381ef492d076090e
  primitives18 ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives61
                   Prims.primitives19) -}
94c497e442c4e006bca69dd3f9043064
  primitives19 ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives58
                   Prims.primitives20) -}
04b6c823f936fac94fabe49827b5f63f
  primitives2 ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives104
                   Prims.primitives3) -}
376b2bf6076b48f764454c85948c20dd
  primitives20 ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives55
                   Prims.primitives21) -}
12a368640cc2286dc6c94fa277b107aa
  primitives21 ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives52
                   Prims.primitives22) -}
3415c68462b47416753afb54396b844f
  primitives22 ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives49
                   Prims.primitives23) -}
583f920d6093b2035db55fa45175cedf
  primitives23 ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives46
                   Prims.primitives24) -}
1ca88fa62600ffe3a528ec25d50f1feb
  primitives24 ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives43
                   Prims.primitives25) -}
540a3cf6f09e62e52887226ef29f1a8d
  primitives25 ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives41
                   Prims.primitives26) -}
3817cbb9bbdda50c0aa7364c5bd94c6f
  primitives26 ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives39
                   Prims.primitives27) -}
f23feb306e2e75de84b1a8101f1133a7
  primitives27 ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives37
                   Prims.primitives28) -}
d6f283e44df7e7f9229b353ef08e519e
  primitives28 ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives35
                   Prims.primitives29) -}
fe263bb8ca35351e869ce9500f014b62
  primitives29 ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives33
                   Prims.primitives30) -}
009eeb4815fd04506c469fee25b6e5eb
  primitives3 ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives101
                   Prims.primitives4) -}
a5c57792873060137944706d97f91ceb
  primitives30 ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives31
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         [Types.LispVal] -> Types.ThrowsError Types.LispVal))) -}
306887003fdc52f660506f835393a17f
  primitives31 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m, Unfolding: ((Prims.primitives32, Prims.equal)) -}
c97a0a33c23fbc48dcd9a68e4563fc82
  primitives32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "equals?"#) -}
90eefcd8a13e91747d1a1ac64c9bb544
  primitives33 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m, Unfolding: ((Prims.primitives34, Prims.eqv)) -}
e7f019056d8038fc7c7942b70899c60f
  primitives34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "eqv?"#) -}
e1da206d425dcc43743ea0e73686fdf9
  primitives35 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m, Unfolding: ((Prims.primitives36, Prims.eqv)) -}
55fc24d2f53d0920e5b4875457bd4cd8
  primitives36 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "eq?"#) -}
ef81e0cf9f9f4cb68d0015994fb71c49
  primitives37 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m, Unfolding: ((Prims.primitives38, Prims.cons)) -}
f6fed5e4c77c7c7d4e8d566e3ad82ca4
  primitives38 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "cons"#) -}
d204ec28a9a068c9dc2064712302b5bc
  primitives39 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m, Unfolding: ((Prims.primitives40, Prims.cdr)) -}
637954989e80cb5ab2d0012c17dd9a5c
  primitives4 ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives98
                   Prims.primitives5) -}
82e827ff8592f6cf9640b01f66e5691f
  primitives40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "cdr"#) -}
1c19763ffa9ac480a5a9a9568c883aa7
  primitives41 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m, Unfolding: ((Prims.primitives42, Prims.car)) -}
c8d923dfb7187caa73a40467c1ee6287
  primitives42 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "car"#) -}
da61d520f46e65bcf86e93010cefc9e3
  primitives43 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m,
     Unfolding: ((Prims.primitives45, Prims.primitives44)) -}
834647f9271c9d473d036914c25844a9
  primitives44 :: [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (args :: [Types.LispVal]) ->
                 case GHC.List.$wlenAcc @ Types.LispVal args 0# of ww2 {
                   DEFAULT
                   -> Data.Either.Left
                        @ Types.LispError
                        @ Types.LispVal
                        (Types.NumArgs Prims.boolBinop1 args)
                   2#
                   -> let {
                        $j :: GHC.Base.String -> Types.ThrowsError Types.LispVal
                          {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (r :: GHC.Base.String)[OneShot] ->
                          case GHC.List.$w!! @ Types.LispVal args 1# of wild {
                            DEFAULT
                            -> Data.Either.Left
                                 @ Types.LispError
                                 @ Types.LispVal
                                 (Types.TypeMismatch Prims.unpackStr1 wild)
                            Types.Number n
                            -> Data.Either.Right
                                 @ Types.LispError
                                 @ Types.LispVal
                                 (Types.Bool
                                    (case GHC.Classes.$fOrd[]_$s$ccompare1
                                            r
                                            (GHC.Show.$fShowInteger_$cshow n) of wild1 {
                                       DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }))
                            Types.String n
                            -> Data.Either.Right
                                 @ Types.LispError
                                 @ Types.LispVal
                                 (Types.Bool (GHC.Classes.$fOrd[]_$s$c>=1 r n))
                            Types.Bool n
                            -> Data.Either.Right
                                 @ Types.LispError
                                 @ Types.LispVal
                                 (Types.Bool
                                    (case GHC.Classes.$fOrd[]_$s$ccompare1
                                            r
                                            (GHC.Show.$fShowBool_$cshow n) of wild1 {
                                       DEFAULT -> GHC.Types.True
                                       GHC.Types.LT -> GHC.Types.False })) }
                      } in
                      case GHC.List.$w!! @ Types.LispVal args 0# of wild {
                        DEFAULT
                        -> Data.Either.Left
                             @ Types.LispError
                             @ Types.LispVal
                             (Types.TypeMismatch Prims.unpackStr1 wild)
                        Types.Number n -> $j (GHC.Show.$fShowInteger_$cshow n)
                        Types.String n -> $j n
                        Types.Bool n -> $j (GHC.Show.$fShowBool_$cshow n) } }) -}
d8250e6b0495c1f4cf2639d591475af2
  primitives45 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "string>=?"#) -}
34012b825e23425ecde06dd635cf556e
  primitives46 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m,
     Unfolding: ((Prims.primitives48, Prims.primitives47)) -}
60419058202129e3f8a0a0029fe32281
  primitives47 :: [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (args :: [Types.LispVal]) ->
                 case GHC.List.$wlenAcc @ Types.LispVal args 0# of ww2 {
                   DEFAULT
                   -> Data.Either.Left
                        @ Types.LispError
                        @ Types.LispVal
                        (Types.NumArgs Prims.boolBinop1 args)
                   2#
                   -> let {
                        $j :: GHC.Base.String -> Types.ThrowsError Types.LispVal
                          {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (r :: GHC.Base.String)[OneShot] ->
                          case GHC.List.$w!! @ Types.LispVal args 1# of wild {
                            DEFAULT
                            -> Data.Either.Left
                                 @ Types.LispError
                                 @ Types.LispVal
                                 (Types.TypeMismatch Prims.unpackStr1 wild)
                            Types.Number n
                            -> Data.Either.Right
                                 @ Types.LispError
                                 @ Types.LispVal
                                 (Types.Bool
                                    (case GHC.Classes.$fOrd[]_$s$ccompare1
                                            r
                                            (GHC.Show.$fShowInteger_$cshow n) of wild1 {
                                       DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }))
                            Types.String n
                            -> Data.Either.Right
                                 @ Types.LispError
                                 @ Types.LispVal
                                 (Types.Bool (GHC.Classes.$fOrd[]_$s$c<=1 r n))
                            Types.Bool n
                            -> Data.Either.Right
                                 @ Types.LispError
                                 @ Types.LispVal
                                 (Types.Bool
                                    (case GHC.Classes.$fOrd[]_$s$ccompare1
                                            r
                                            (GHC.Show.$fShowBool_$cshow n) of wild1 {
                                       DEFAULT -> GHC.Types.True
                                       GHC.Types.GT -> GHC.Types.False })) }
                      } in
                      case GHC.List.$w!! @ Types.LispVal args 0# of wild {
                        DEFAULT
                        -> Data.Either.Left
                             @ Types.LispError
                             @ Types.LispVal
                             (Types.TypeMismatch Prims.unpackStr1 wild)
                        Types.Number n -> $j (GHC.Show.$fShowInteger_$cshow n)
                        Types.String n -> $j n
                        Types.Bool n -> $j (GHC.Show.$fShowBool_$cshow n) } }) -}
49dfa0285c118a4a4f8f26248afebeed
  primitives48 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "string<=?"#) -}
1789f561db5c62dd3570b8aad56889f4
  primitives49 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m,
     Unfolding: ((Prims.primitives51, Prims.primitives50)) -}
3e1a5606ac5f99e10dde6db882cdf270
  primitives5 ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives95
                   Prims.primitives6) -}
f69b150abac1ce9c382db18324b74cbb
  primitives50 :: [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (args :: [Types.LispVal]) ->
                 case GHC.List.$wlenAcc @ Types.LispVal args 0# of ww2 {
                   DEFAULT
                   -> Data.Either.Left
                        @ Types.LispError
                        @ Types.LispVal
                        (Types.NumArgs Prims.boolBinop1 args)
                   2#
                   -> let {
                        $j :: GHC.Base.String -> Types.ThrowsError Types.LispVal
                          {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (r :: GHC.Base.String)[OneShot] ->
                          case GHC.List.$w!! @ Types.LispVal args 1# of wild {
                            DEFAULT
                            -> Data.Either.Left
                                 @ Types.LispError
                                 @ Types.LispVal
                                 (Types.TypeMismatch Prims.unpackStr1 wild)
                            Types.Number n
                            -> Data.Either.Right
                                 @ Types.LispError
                                 @ Types.LispVal
                                 (Types.Bool
                                    (case GHC.Classes.$fOrd[]_$s$ccompare1
                                            r
                                            (GHC.Show.$fShowInteger_$cshow n) of wild1 {
                                       DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }))
                            Types.String n
                            -> Data.Either.Right
                                 @ Types.LispError
                                 @ Types.LispVal
                                 (Types.Bool (GHC.Classes.$fOrd[]_$s$c>1 r n))
                            Types.Bool n
                            -> Data.Either.Right
                                 @ Types.LispError
                                 @ Types.LispVal
                                 (Types.Bool
                                    (case GHC.Classes.$fOrd[]_$s$ccompare1
                                            r
                                            (GHC.Show.$fShowBool_$cshow n) of wild1 {
                                       DEFAULT -> GHC.Types.False
                                       GHC.Types.GT -> GHC.Types.True })) }
                      } in
                      case GHC.List.$w!! @ Types.LispVal args 0# of wild {
                        DEFAULT
                        -> Data.Either.Left
                             @ Types.LispError
                             @ Types.LispVal
                             (Types.TypeMismatch Prims.unpackStr1 wild)
                        Types.Number n -> $j (GHC.Show.$fShowInteger_$cshow n)
                        Types.String n -> $j n
                        Types.Bool n -> $j (GHC.Show.$fShowBool_$cshow n) } }) -}
f729add11ce9a63c82ff860342d82707
  primitives51 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "string>?"#) -}
5cf706737e4cc41afc835091140dac03
  primitives52 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m,
     Unfolding: ((Prims.primitives54, Prims.primitives53)) -}
6c9551dfb703b45bb91e6f80deea2f95
  primitives53 :: [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (args :: [Types.LispVal]) ->
                 case GHC.List.$wlenAcc @ Types.LispVal args 0# of ww2 {
                   DEFAULT
                   -> Data.Either.Left
                        @ Types.LispError
                        @ Types.LispVal
                        (Types.NumArgs Prims.boolBinop1 args)
                   2#
                   -> let {
                        $j :: GHC.Base.String -> Types.ThrowsError Types.LispVal
                          {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (r :: GHC.Base.String)[OneShot] ->
                          case GHC.List.$w!! @ Types.LispVal args 1# of wild {
                            DEFAULT
                            -> Data.Either.Left
                                 @ Types.LispError
                                 @ Types.LispVal
                                 (Types.TypeMismatch Prims.unpackStr1 wild)
                            Types.Number n
                            -> Data.Either.Right
                                 @ Types.LispError
                                 @ Types.LispVal
                                 (Types.Bool
                                    (case GHC.Classes.$fOrd[]_$s$ccompare1
                                            r
                                            (GHC.Show.$fShowInteger_$cshow n) of wild1 {
                                       DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }))
                            Types.String n
                            -> Data.Either.Right
                                 @ Types.LispError
                                 @ Types.LispVal
                                 (Types.Bool (GHC.Classes.$fOrd[]_$s$c<1 r n))
                            Types.Bool n
                            -> Data.Either.Right
                                 @ Types.LispError
                                 @ Types.LispVal
                                 (Types.Bool
                                    (case GHC.Classes.$fOrd[]_$s$ccompare1
                                            r
                                            (GHC.Show.$fShowBool_$cshow n) of wild1 {
                                       DEFAULT -> GHC.Types.False
                                       GHC.Types.LT -> GHC.Types.True })) }
                      } in
                      case GHC.List.$w!! @ Types.LispVal args 0# of wild {
                        DEFAULT
                        -> Data.Either.Left
                             @ Types.LispError
                             @ Types.LispVal
                             (Types.TypeMismatch Prims.unpackStr1 wild)
                        Types.Number n -> $j (GHC.Show.$fShowInteger_$cshow n)
                        Types.String n -> $j n
                        Types.Bool n -> $j (GHC.Show.$fShowBool_$cshow n) } }) -}
a727d5e90ea09dfd04c9123d4dd45865
  primitives54 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "string<?"#) -}
9f30612782e138e08bbdd43a15690623
  primitives55 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m,
     Unfolding: ((Prims.primitives57, Prims.primitives56)) -}
db2b160108fd6783314a9d64ada99a6e
  primitives56 :: [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (args :: [Types.LispVal]) ->
                 case GHC.List.$wlenAcc @ Types.LispVal args 0# of ww2 {
                   DEFAULT
                   -> Data.Either.Left
                        @ Types.LispError
                        @ Types.LispVal
                        (Types.NumArgs Prims.boolBinop1 args)
                   2#
                   -> let {
                        $j :: GHC.Base.String -> Types.ThrowsError Types.LispVal
                          {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (r :: GHC.Base.String)[OneShot] ->
                          case GHC.List.$w!! @ Types.LispVal args 1# of wild {
                            DEFAULT
                            -> Data.Either.Left
                                 @ Types.LispError
                                 @ Types.LispVal
                                 (Types.TypeMismatch Prims.unpackStr1 wild)
                            Types.Number n
                            -> Data.Either.Right
                                 @ Types.LispError
                                 @ Types.LispVal
                                 (Types.Bool
                                    (case GHC.Show.$w$cshowsPrec3
                                            0#
                                            n
                                            (GHC.Types.[]
                                               @ GHC.Types.Char) of ww1 { (#,#) ww3 ww4 ->
                                     GHC.Base.eqString r (GHC.Types.: @ GHC.Types.Char ww3 ww4) }))
                            Types.String n
                            -> Data.Either.Right
                                 @ Types.LispError
                                 @ Types.LispVal
                                 (Types.Bool (GHC.Base.eqString r n))
                            Types.Bool n
                            -> Data.Either.Right
                                 @ Types.LispError
                                 @ Types.LispVal
                                 (Types.Bool
                                    (case n of wild1 {
                                       GHC.Types.False -> GHC.Base.eqString r GHC.Show.shows21
                                       GHC.Types.True -> GHC.Base.eqString r GHC.Show.shows20 })) }
                      } in
                      case GHC.List.$w!! @ Types.LispVal args 0# of wild {
                        DEFAULT
                        -> Data.Either.Left
                             @ Types.LispError
                             @ Types.LispVal
                             (Types.TypeMismatch Prims.unpackStr1 wild)
                        Types.Number n -> $j (GHC.Show.$fShowInteger_$cshow n)
                        Types.String n -> $j n
                        Types.Bool n -> $j (GHC.Show.$fShowBool_$cshow n) } }) -}
6e9a87cb6f59ecc801a19725c5ecff5f
  primitives57 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "string=?"#) -}
d3ce913d040c3f40f0e1893ec92bed5c
  primitives58 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m,
     Unfolding: ((Prims.primitives60, Prims.primitives59)) -}
f0104067340469abf5356e18e57f1061
  primitives59 :: [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (args :: [Types.LispVal]) ->
                 case GHC.List.$wlenAcc @ Types.LispVal args 0# of ww2 {
                   DEFAULT
                   -> Data.Either.Left
                        @ Types.LispError
                        @ Types.LispVal
                        (Types.NumArgs Prims.boolBinop1 args)
                   2#
                   -> case GHC.List.$w!! @ Types.LispVal args 0# of wild {
                        DEFAULT
                        -> Data.Either.Left
                             @ Types.LispError
                             @ Types.LispVal
                             (Types.TypeMismatch Prims.unpackBool1 wild)
                        Types.Bool n
                        -> case GHC.List.$w!! @ Types.LispVal args 1# of wild1 {
                             DEFAULT
                             -> Data.Either.Left
                                  @ Types.LispError
                                  @ Types.LispVal
                                  (Types.TypeMismatch Prims.unpackBool1 wild1)
                             Types.Bool n1
                             -> Data.Either.Right
                                  @ Types.LispError
                                  @ Types.LispVal
                                  (Types.Bool (GHC.Classes.|| n n1)) } } }) -}
fe9ac42527cfd0f2f24864f06b8eeac6
  primitives6 ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives92
                   Prims.primitives7) -}
488ef839557b014ca973fdeed997edbc
  primitives60 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "||"#) -}
d56d15b6b18420d768bf90fdd4acaca3
  primitives61 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m,
     Unfolding: ((Prims.primitives63, Prims.primitives62)) -}
b745bd3f4e8accc2264729ac48ee6ffa
  primitives62 :: [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (args :: [Types.LispVal]) ->
                 case GHC.List.$wlenAcc @ Types.LispVal args 0# of ww2 {
                   DEFAULT
                   -> Data.Either.Left
                        @ Types.LispError
                        @ Types.LispVal
                        (Types.NumArgs Prims.boolBinop1 args)
                   2#
                   -> case GHC.List.$w!! @ Types.LispVal args 0# of wild {
                        DEFAULT
                        -> Data.Either.Left
                             @ Types.LispError
                             @ Types.LispVal
                             (Types.TypeMismatch Prims.unpackBool1 wild)
                        Types.Bool n
                        -> case GHC.List.$w!! @ Types.LispVal args 1# of wild1 {
                             DEFAULT
                             -> Data.Either.Left
                                  @ Types.LispError
                                  @ Types.LispVal
                                  (Types.TypeMismatch Prims.unpackBool1 wild1)
                             Types.Bool n1
                             -> Data.Either.Right
                                  @ Types.LispError
                                  @ Types.LispVal
                                  (Types.Bool (GHC.Classes.&& n n1)) } } }) -}
546a7cb72b7e5450a1c9e4180e44b3ad
  primitives63 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "&&"#) -}
5972fef7ad2a05d5c86f0c6262521ae3
  primitives64 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m,
     Unfolding: ((Prims.primitives66, Prims.primitives65)) -}
cff7b22410a5e8ac63f028b55d6c83af
  primitives65 :: [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (args :: [Types.LispVal]) ->
                 case GHC.List.$wlenAcc @ Types.LispVal args 0# of ww2 {
                   DEFAULT
                   -> Data.Either.Left
                        @ Types.LispError
                        @ Types.LispVal
                        (Types.NumArgs Prims.boolBinop1 args)
                   2#
                   -> case Prims.unpackNum
                             (GHC.List.$w!! @ Types.LispVal args 0#) of wild {
                        Data.Either.Left l
                        -> Data.Either.Left @ Types.LispError @ Types.LispVal l
                        Data.Either.Right r
                        -> case Prims.unpackNum
                                  (GHC.List.$w!! @ Types.LispVal args 1#) of wild1 {
                             Data.Either.Left l
                             -> Data.Either.Left @ Types.LispError @ Types.LispVal l
                             Data.Either.Right r1
                             -> Data.Either.Right
                                  @ Types.LispError
                                  @ Types.LispVal
                                  (Types.Bool (GHC.Integer.Type.leInteger r r1)) } } }) -}
e0a32e0d6d80f99077581e2efb31a32d
  primitives66 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "<="#) -}
ac90501185bc494c64977d51749822ae
  primitives67 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m,
     Unfolding: ((Prims.primitives69, Prims.primitives68)) -}
abbea9c852b4baff0cc45d50e314c301
  primitives68 :: [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (args :: [Types.LispVal]) ->
                 case GHC.List.$wlenAcc @ Types.LispVal args 0# of ww2 {
                   DEFAULT
                   -> Data.Either.Left
                        @ Types.LispError
                        @ Types.LispVal
                        (Types.NumArgs Prims.boolBinop1 args)
                   2#
                   -> case Prims.unpackNum
                             (GHC.List.$w!! @ Types.LispVal args 0#) of wild {
                        Data.Either.Left l
                        -> Data.Either.Left @ Types.LispError @ Types.LispVal l
                        Data.Either.Right r
                        -> case Prims.unpackNum
                                  (GHC.List.$w!! @ Types.LispVal args 1#) of wild1 {
                             Data.Either.Left l
                             -> Data.Either.Left @ Types.LispError @ Types.LispVal l
                             Data.Either.Right r1
                             -> Data.Either.Right
                                  @ Types.LispError
                                  @ Types.LispVal
                                  (Types.Bool (GHC.Integer.Type.geInteger r r1)) } } }) -}
ce2541a9d31a34db3a90bcfa84500157
  primitives69 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ">="#) -}
98a58b636315708e14e72ab52d708644
  primitives7 ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives90
                   Prims.primitives8) -}
80bd4a3f2eeb3bd036b15e4838f0a1da
  primitives70 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m,
     Unfolding: ((Prims.primitives72, Prims.primitives71)) -}
0f98ed466c1848035cccaf8694d71b2c
  primitives71 :: [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (args :: [Types.LispVal]) ->
                 case GHC.List.$wlenAcc @ Types.LispVal args 0# of ww2 {
                   DEFAULT
                   -> Data.Either.Left
                        @ Types.LispError
                        @ Types.LispVal
                        (Types.NumArgs Prims.boolBinop1 args)
                   2#
                   -> case Prims.unpackNum
                             (GHC.List.$w!! @ Types.LispVal args 0#) of wild {
                        Data.Either.Left l
                        -> Data.Either.Left @ Types.LispError @ Types.LispVal l
                        Data.Either.Right r
                        -> case Prims.unpackNum
                                  (GHC.List.$w!! @ Types.LispVal args 1#) of wild1 {
                             Data.Either.Left l
                             -> Data.Either.Left @ Types.LispError @ Types.LispVal l
                             Data.Either.Right r1
                             -> Data.Either.Right
                                  @ Types.LispError
                                  @ Types.LispVal
                                  (Types.Bool (GHC.Integer.Type.neqInteger r r1)) } } }) -}
e1405945e37197f3e0bad5e0bf3d64da
  primitives72 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/="#) -}
00b4215509d2fd223c090525c9bdfbe2
  primitives73 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m,
     Unfolding: ((Prims.primitives75, Prims.primitives74)) -}
d02cfe663bbcf9e89a84d763a6321d00
  primitives74 :: [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (args :: [Types.LispVal]) ->
                 case GHC.List.$wlenAcc @ Types.LispVal args 0# of ww2 {
                   DEFAULT
                   -> Data.Either.Left
                        @ Types.LispError
                        @ Types.LispVal
                        (Types.NumArgs Prims.boolBinop1 args)
                   2#
                   -> case Prims.unpackNum
                             (GHC.List.$w!! @ Types.LispVal args 0#) of wild {
                        Data.Either.Left l
                        -> Data.Either.Left @ Types.LispError @ Types.LispVal l
                        Data.Either.Right r
                        -> case Prims.unpackNum
                                  (GHC.List.$w!! @ Types.LispVal args 1#) of wild1 {
                             Data.Either.Left l
                             -> Data.Either.Left @ Types.LispError @ Types.LispVal l
                             Data.Either.Right r1
                             -> Data.Either.Right
                                  @ Types.LispError
                                  @ Types.LispVal
                                  (Types.Bool (GHC.Integer.Type.gtInteger r r1)) } } }) -}
a4e74fc61395e3cc33ca7b3081236015
  primitives75 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ">"#) -}
eeccc24ec2e56362d4195ef872b1c1a7
  primitives76 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m,
     Unfolding: ((Prims.primitives78, Prims.primitives77)) -}
5b4fe0fe351531de251b45386a0a6d6e
  primitives77 :: [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (args :: [Types.LispVal]) ->
                 case GHC.List.$wlenAcc @ Types.LispVal args 0# of ww2 {
                   DEFAULT
                   -> Data.Either.Left
                        @ Types.LispError
                        @ Types.LispVal
                        (Types.NumArgs Prims.boolBinop1 args)
                   2#
                   -> case Prims.unpackNum
                             (GHC.List.$w!! @ Types.LispVal args 0#) of wild {
                        Data.Either.Left l
                        -> Data.Either.Left @ Types.LispError @ Types.LispVal l
                        Data.Either.Right r
                        -> case Prims.unpackNum
                                  (GHC.List.$w!! @ Types.LispVal args 1#) of wild1 {
                             Data.Either.Left l
                             -> Data.Either.Left @ Types.LispError @ Types.LispVal l
                             Data.Either.Right r1
                             -> Data.Either.Right
                                  @ Types.LispError
                                  @ Types.LispVal
                                  (Types.Bool (GHC.Integer.Type.ltInteger r r1)) } } }) -}
6ccb3d5962ef2b7291c5d5ef98d87f61
  primitives78 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "<"#) -}
ba8973b872379f134b88d5a522f95b97
  primitives79 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m,
     Unfolding: ((Prims.primitives81, Prims.primitives80)) -}
bdc2f42c8bfeca6c2c1871e2de1d6207
  primitives8 ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives88
                   Prims.primitives9) -}
743e297c43b0762e6917217b69f79d3f
  primitives80 :: [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (args :: [Types.LispVal]) ->
                 case GHC.List.$wlenAcc @ Types.LispVal args 0# of ww2 {
                   DEFAULT
                   -> Data.Either.Left
                        @ Types.LispError
                        @ Types.LispVal
                        (Types.NumArgs Prims.boolBinop1 args)
                   2#
                   -> case Prims.unpackNum
                             (GHC.List.$w!! @ Types.LispVal args 0#) of wild {
                        Data.Either.Left l
                        -> Data.Either.Left @ Types.LispError @ Types.LispVal l
                        Data.Either.Right r
                        -> case Prims.unpackNum
                                  (GHC.List.$w!! @ Types.LispVal args 1#) of wild1 {
                             Data.Either.Left l
                             -> Data.Either.Left @ Types.LispError @ Types.LispVal l
                             Data.Either.Right r1
                             -> Data.Either.Right
                                  @ Types.LispError
                                  @ Types.LispVal
                                  (Types.Bool (GHC.Integer.Type.eqInteger r r1)) } } }) -}
0fe01f53cf8a1931f354a98b740b4bdc
  primitives81 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "="#) -}
ebc21c8f57773544aae3da3355ecbe9a
  primitives82 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m,
     Unfolding: ((Prims.primitives83, Prims.stringToSymbol)) -}
069bfb48d3dea639cc63aaacfb33c74d
  primitives83 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "string->symbol"#) -}
3f076509a02385378935416f63774b16
  primitives84 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m,
     Unfolding: ((Prims.primitives85, Prims.symbolToString)) -}
fe4a4fed2083e574065a98034e0c0fd7
  primitives85 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "symbol->string"#) -}
97800df72c4fb14ff102c0b9e085dd45
  primitives86 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m,
     Unfolding: ((Prims.primitives87, Prims.numberp)) -}
a5a028b84b417fb04172d82501f39e68
  primitives87 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "number?"#) -}
e518b8a462383e971a2277686dab1b28
  primitives88 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m,
     Unfolding: ((Prims.primitives89, Prims.stringp)) -}
d599291a21692fe586bbf8516b0d84c4
  primitives89 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "string?"#) -}
f315a8142b73acf68391e5aa77c7a576
  primitives9 ::
    [(GHC.Base.String,
      [Types.LispVal] -> Types.ThrowsError Types.LispVal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      [Types.LispVal] -> Types.ThrowsError Types.LispVal)
                   Prims.primitives86
                   Prims.primitives10) -}
d85dc6b326b676e94f786038dad53c47
  primitives90 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m,
     Unfolding: ((Prims.primitives91, Prims.symbolp)) -}
502aa08e3f8db1c562c745c472bdbc61
  primitives91 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "symbol?"#) -}
ea9ee91fbed03188ed63a9c34340fd5a
  primitives92 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m,
     Unfolding: ((Prims.primitives94, Prims.primitives93)) -}
1bea1076be68373776ed196ee2d77747
  primitives93 :: [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 1,
     Unfolding: (Prims.numericBinop GHC.Real.$fIntegralInteger_$crem) -}
4ceb2d4999041e47ee9a8e41128202c1
  primitives94 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "remainder"#) -}
cede4eecc029c19fac4a0643fb320007
  primitives95 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m,
     Unfolding: ((Prims.primitives97, Prims.primitives96)) -}
81442823e92af13e17ac9cbb38be73b5
  primitives96 :: [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 1,
     Unfolding: (Prims.numericBinop
                   GHC.Real.$fIntegralInteger_$cquot) -}
ab6748162bfd6a520f64f1ecce181925
  primitives97 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "quotient"#) -}
d9c752c5d2281673f2f6ae74930c6fe0
  primitives98 ::
    ([GHC.Types.Char],
     [Types.LispVal] -> Types.ThrowsError Types.LispVal)
  {- Strictness: m,
     Unfolding: ((Prims.primitives100, Prims.primitives99)) -}
f1807edc129567be8a307a25577548fa
  primitives99 :: [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 1,
     Unfolding: (Prims.numericBinop GHC.Real.$fIntegralInteger_$cmod) -}
b23a6e96881839f61cf47c17ad812116
  strBoolBinop ::
    (GHC.Base.String -> GHC.Base.String -> GHC.Types.Bool)
    -> [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 2,
     Unfolding: (Prims.boolBinop @ GHC.Base.String Prims.unpackStr) -}
2eab61dfb77e221b06d0d7b3ca0ceba2
  stringToSymbol ::
    [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: [Types.LispVal]) ->
                 case ds of wild {
                   [] -> Prims.car3
                   : ds1 ds2
                   -> case ds1 of wild1 {
                        DEFAULT
                        -> Data.Either.Left
                             @ Types.LispError
                             @ Types.LispVal
                             (Types.NumArgs Prims.car1 wild)
                        Types.String str
                        -> Data.Either.Right
                             @ Types.LispError
                             @ Types.LispVal
                             (Types.Atom str) } }) -}
c28b8816ffd14d221f8a2e7d2af58201
  stringp :: [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Types.LispVal]) ->
                 case ds of wild {
                   [] -> Prims.car3
                   : ds1 ds2
                   -> case ds1 of wild1 {
                        DEFAULT
                        -> case ds2 of wild2 {
                             [] -> Prims.numberp3
                             : ipv ipv1
                             -> Data.Either.Left
                                  @ Types.LispError
                                  @ Types.LispVal
                                  (Types.NumArgs Prims.car1 wild) }
                        Types.String ds3
                        -> case ds2 of wild2 {
                             [] -> Prims.numberp1
                             : ipv ipv1
                             -> Data.Either.Left
                                  @ Types.LispError
                                  @ Types.LispVal
                                  (Types.NumArgs Prims.car1 wild) } } }) -}
eba795ad7dcc51c7b9440198fa00455e
  symbolToString ::
    [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Types.LispVal]) ->
                 case ds of wild {
                   [] -> Prims.car3
                   : ds1 ds2
                   -> case ds1 of wild1 {
                        DEFAULT
                        -> Data.Either.Left
                             @ Types.LispError
                             @ Types.LispVal
                             (Types.NumArgs Prims.car1 wild)
                        Types.Atom name
                        -> case ds2 of wild2 {
                             []
                             -> Data.Either.Right
                                  @ Types.LispError
                                  @ Types.LispVal
                                  (Types.String name)
                             : ipv ipv1
                             -> Data.Either.Left
                                  @ Types.LispError
                                  @ Types.LispVal
                                  (Types.NumArgs Prims.car1 wild) } } }) -}
79c40f8fb4da8c8fc38169a1c07d557a
  symbolp :: [Types.LispVal] -> Types.ThrowsError Types.LispVal
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Types.LispVal]) ->
                 case ds of wild {
                   [] -> Prims.car3
                   : ds1 ds2
                   -> case ds1 of wild1 {
                        DEFAULT
                        -> case ds2 of wild2 {
                             [] -> Prims.numberp3
                             : ipv ipv1
                             -> Data.Either.Left
                                  @ Types.LispError
                                  @ Types.LispVal
                                  (Types.NumArgs Prims.car1 wild) }
                        Types.Atom ds3
                        -> case ds2 of wild2 {
                             [] -> Prims.numberp1
                             : ipv ipv1
                             -> Data.Either.Left
                                  @ Types.LispError
                                  @ Types.LispVal
                                  (Types.NumArgs Prims.car1 wild) } } }) -}
7e1491380844cdc7a4b665aaa3af4a03
  unpackBool :: Types.LispVal -> Types.ThrowsError GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.LispVal) ->
                 case ds of wild {
                   DEFAULT
                   -> Data.Either.Left
                        @ Types.LispError
                        @ GHC.Types.Bool
                        (Types.TypeMismatch Prims.unpackBool1 wild)
                   Types.Bool n
                   -> Data.Either.Right @ Types.LispError @ GHC.Types.Bool n }) -}
d19b18ccbed940234abcdcfa0452d57f
  unpackBool1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "boolean"#) -}
ae7276dab8fa760bfd02198dbcca22ec
  unpackEquals ::
    Types.LispVal
    -> Types.LispVal
    -> Types.Unpacker
    -> Types.ThrowsError GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,1*U>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Types.LispVal)
                   (w1 :: Types.LispVal)
                   (w2 :: Types.Unpacker) ->
                 case w2 of wild { Types.AnyUnpacker a $dEq unpacker ->
                 case unpacker w of wild1 {
                   Data.Either.Left l
                   -> Data.Either.Right
                        @ Types.LispError
                        @ GHC.Types.Bool
                        GHC.Types.False
                   Data.Either.Right r
                   -> case unpacker w1 of wild2 {
                        Data.Either.Left l
                        -> Data.Either.Right
                             @ Types.LispError
                             @ GHC.Types.Bool
                             GHC.Types.False
                        Data.Either.Right r1
                        -> Data.Either.Right
                             @ Types.LispError
                             @ GHC.Types.Bool
                             (GHC.Classes.== @ a $dEq r r1) } } }) -}
cca7a7cc52b7e3f6244e29be60047cbf
  unpackNum ::
    Types.LispVal -> Types.ThrowsError GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,1*U> -}
f80255a03fc11d1eb21b3918f4b32319
  unpackStr :: Types.LispVal -> Types.ThrowsError GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Types.LispVal) ->
                 case ds of wild {
                   DEFAULT
                   -> Data.Either.Left
                        @ Types.LispError
                        @ GHC.Base.String
                        (Types.TypeMismatch Prims.unpackStr1 wild)
                   Types.Number n
                   -> Data.Either.Right
                        @ Types.LispError
                        @ GHC.Base.String
                        (GHC.Show.$fShowInteger_$cshow n)
                   Types.String n
                   -> Data.Either.Right @ Types.LispError @ GHC.Base.String n
                   Types.Bool n
                   -> Data.Either.Right
                        @ Types.LispError
                        @ GHC.Base.String
                        (GHC.Show.$fShowBool_$cshow n) }) -}
86af1cef7754c7505d21f83761013456
  unpackStr1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "string"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

